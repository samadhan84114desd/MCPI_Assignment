
Day07_USART_Asm_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000007b4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  0800093c  0800093c  0000193c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000a6c  08000a6c  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  08000a6c  08000a6c  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a6c  08000a6c  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a6c  08000a6c  00001a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000a70  08000a70  00001a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000a74  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002004  2**0
                  CONTENTS
 10 .bss          0000002c  20000004  20000004  00002004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000030  20000030  00002004  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001dba  00000000  00000000  0000202e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000079e  00000000  00000000  00003de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000148  00000000  00000000  00004588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000dd  00000000  00000000  000046d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018485  00000000  00000000  000047ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001c2b  00000000  00000000  0001cc32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008bf8d  00000000  00000000  0001e85d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000aa7ea  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000370  00000000  00000000  000aa830  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000001f  00000000  00000000  000aaba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000056  00000000  00000000  000aabbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000924 	.word	0x08000924

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08000924 	.word	0x08000924

080001c8 <LedInit>:
 */

#include "led.h"
#include "stm32f4xx.h"

void LedInit(uint32_t pin) {
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	// enable gpio clock (in AHB1ENR)
	RCC->AHB1ENR |= BV(LED_GPIO_EN);
 80001d0:	4b28      	ldr	r3, [pc, #160]	@ (8000274 <LedInit+0xac>)
 80001d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001d4:	4a27      	ldr	r2, [pc, #156]	@ (8000274 <LedInit+0xac>)
 80001d6:	f043 0308 	orr.w	r3, r3, #8
 80001da:	6313      	str	r3, [r2, #48]	@ 0x30
	// set gpio pin as output (in MODER)
	LED_GPIO->MODER &= ~BV(pin * 2 + 1);
 80001dc:	4b26      	ldr	r3, [pc, #152]	@ (8000278 <LedInit+0xb0>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	687a      	ldr	r2, [r7, #4]
 80001e2:	0052      	lsls	r2, r2, #1
 80001e4:	3201      	adds	r2, #1
 80001e6:	2101      	movs	r1, #1
 80001e8:	fa01 f202 	lsl.w	r2, r1, r2
 80001ec:	43d2      	mvns	r2, r2
 80001ee:	4611      	mov	r1, r2
 80001f0:	4a21      	ldr	r2, [pc, #132]	@ (8000278 <LedInit+0xb0>)
 80001f2:	400b      	ands	r3, r1
 80001f4:	6013      	str	r3, [r2, #0]
	LED_GPIO->MODER |= BV(pin * 2);
 80001f6:	4b20      	ldr	r3, [pc, #128]	@ (8000278 <LedInit+0xb0>)
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	687a      	ldr	r2, [r7, #4]
 80001fc:	0052      	lsls	r2, r2, #1
 80001fe:	2101      	movs	r1, #1
 8000200:	fa01 f202 	lsl.w	r2, r1, r2
 8000204:	4611      	mov	r1, r2
 8000206:	4a1c      	ldr	r2, [pc, #112]	@ (8000278 <LedInit+0xb0>)
 8000208:	430b      	orrs	r3, r1
 800020a:	6013      	str	r3, [r2, #0]
	// set gpio pin speed to low (in OSPEEDR)
	LED_GPIO->OSPEEDR &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 800020c:	4b1a      	ldr	r3, [pc, #104]	@ (8000278 <LedInit+0xb0>)
 800020e:	689b      	ldr	r3, [r3, #8]
 8000210:	687a      	ldr	r2, [r7, #4]
 8000212:	0052      	lsls	r2, r2, #1
 8000214:	3201      	adds	r2, #1
 8000216:	2101      	movs	r1, #1
 8000218:	4091      	lsls	r1, r2
 800021a:	687a      	ldr	r2, [r7, #4]
 800021c:	0052      	lsls	r2, r2, #1
 800021e:	2001      	movs	r0, #1
 8000220:	fa00 f202 	lsl.w	r2, r0, r2
 8000224:	430a      	orrs	r2, r1
 8000226:	43d2      	mvns	r2, r2
 8000228:	4611      	mov	r1, r2
 800022a:	4a13      	ldr	r2, [pc, #76]	@ (8000278 <LedInit+0xb0>)
 800022c:	400b      	ands	r3, r1
 800022e:	6093      	str	r3, [r2, #8]
	// set gpio pin no pull up, no pull down (in PUPDR)
	LED_GPIO->PUPDR &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 8000230:	4b11      	ldr	r3, [pc, #68]	@ (8000278 <LedInit+0xb0>)
 8000232:	68db      	ldr	r3, [r3, #12]
 8000234:	687a      	ldr	r2, [r7, #4]
 8000236:	0052      	lsls	r2, r2, #1
 8000238:	3201      	adds	r2, #1
 800023a:	2101      	movs	r1, #1
 800023c:	4091      	lsls	r1, r2
 800023e:	687a      	ldr	r2, [r7, #4]
 8000240:	0052      	lsls	r2, r2, #1
 8000242:	2001      	movs	r0, #1
 8000244:	fa00 f202 	lsl.w	r2, r0, r2
 8000248:	430a      	orrs	r2, r1
 800024a:	43d2      	mvns	r2, r2
 800024c:	4611      	mov	r1, r2
 800024e:	4a0a      	ldr	r2, [pc, #40]	@ (8000278 <LedInit+0xb0>)
 8000250:	400b      	ands	r3, r1
 8000252:	60d3      	str	r3, [r2, #12]
	// set gpio pin type as push-pull (in OTYPER)
	LED_GPIO->OTYPER &= ~BV(pin);
 8000254:	4b08      	ldr	r3, [pc, #32]	@ (8000278 <LedInit+0xb0>)
 8000256:	685b      	ldr	r3, [r3, #4]
 8000258:	2101      	movs	r1, #1
 800025a:	687a      	ldr	r2, [r7, #4]
 800025c:	fa01 f202 	lsl.w	r2, r1, r2
 8000260:	43d2      	mvns	r2, r2
 8000262:	4611      	mov	r1, r2
 8000264:	4a04      	ldr	r2, [pc, #16]	@ (8000278 <LedInit+0xb0>)
 8000266:	400b      	ands	r3, r1
 8000268:	6053      	str	r3, [r2, #4]
}
 800026a:	bf00      	nop
 800026c:	370c      	adds	r7, #12
 800026e:	46bd      	mov	sp, r7
 8000270:	bc80      	pop	{r7}
 8000272:	4770      	bx	lr
 8000274:	40023800 	.word	0x40023800
 8000278:	40020c00 	.word	0x40020c00

0800027c <LedOn>:

void LedOn(uint32_t pin) {
 800027c:	b480      	push	{r7}
 800027e:	b083      	sub	sp, #12
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]
	// set led pin (in ODR)
	LED_GPIO->ODR |= BV(pin);
 8000284:	4b07      	ldr	r3, [pc, #28]	@ (80002a4 <LedOn+0x28>)
 8000286:	695b      	ldr	r3, [r3, #20]
 8000288:	2101      	movs	r1, #1
 800028a:	687a      	ldr	r2, [r7, #4]
 800028c:	fa01 f202 	lsl.w	r2, r1, r2
 8000290:	4611      	mov	r1, r2
 8000292:	4a04      	ldr	r2, [pc, #16]	@ (80002a4 <LedOn+0x28>)
 8000294:	430b      	orrs	r3, r1
 8000296:	6153      	str	r3, [r2, #20]
}
 8000298:	bf00      	nop
 800029a:	370c      	adds	r7, #12
 800029c:	46bd      	mov	sp, r7
 800029e:	bc80      	pop	{r7}
 80002a0:	4770      	bx	lr
 80002a2:	bf00      	nop
 80002a4:	40020c00 	.word	0x40020c00

080002a8 <LedOff>:

void LedOff(uint32_t pin) {
 80002a8:	b480      	push	{r7}
 80002aa:	b083      	sub	sp, #12
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
	// clear led pin (in ODR)
	LED_GPIO->ODR &= ~BV(pin);
 80002b0:	4b07      	ldr	r3, [pc, #28]	@ (80002d0 <LedOff+0x28>)
 80002b2:	695b      	ldr	r3, [r3, #20]
 80002b4:	2101      	movs	r1, #1
 80002b6:	687a      	ldr	r2, [r7, #4]
 80002b8:	fa01 f202 	lsl.w	r2, r1, r2
 80002bc:	43d2      	mvns	r2, r2
 80002be:	4611      	mov	r1, r2
 80002c0:	4a03      	ldr	r2, [pc, #12]	@ (80002d0 <LedOff+0x28>)
 80002c2:	400b      	ands	r3, r1
 80002c4:	6153      	str	r3, [r2, #20]
}
 80002c6:	bf00      	nop
 80002c8:	370c      	adds	r7, #12
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bc80      	pop	{r7}
 80002ce:	4770      	bx	lr
 80002d0:	40020c00 	.word	0x40020c00

080002d4 <DelayMs>:
uint32_t DWT_Init(void);

#ifndef DELAY_MS
#define DELAY_MS

static inline void DelayMs(volatile uint32_t ms) {
 80002d4:	b480      	push	{r7}
 80002d6:	b085      	sub	sp, #20
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 80002dc:	4b0e      	ldr	r3, [pc, #56]	@ (8000318 <DelayMs+0x44>)
 80002de:	685b      	ldr	r3, [r3, #4]
 80002e0:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 80002e2:	4b0e      	ldr	r3, [pc, #56]	@ (800031c <DelayMs+0x48>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	4a0e      	ldr	r2, [pc, #56]	@ (8000320 <DelayMs+0x4c>)
 80002e8:	fba2 2303 	umull	r2, r3, r2, r3
 80002ec:	099b      	lsrs	r3, r3, #6
 80002ee:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	68ba      	ldr	r2, [r7, #8]
 80002f4:	fb02 f303 	mul.w	r3, r2, r3
 80002f8:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 80002fa:	bf00      	nop
 80002fc:	4b06      	ldr	r3, [pc, #24]	@ (8000318 <DelayMs+0x44>)
 80002fe:	685a      	ldr	r2, [r3, #4]
 8000300:	68fb      	ldr	r3, [r7, #12]
 8000302:	1ad2      	subs	r2, r2, r3
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	429a      	cmp	r2, r3
 8000308:	d3f8      	bcc.n	80002fc <DelayMs+0x28>
}
 800030a:	bf00      	nop
 800030c:	bf00      	nop
 800030e:	3714      	adds	r7, #20
 8000310:	46bd      	mov	sp, r7
 8000312:	bc80      	pop	{r7}
 8000314:	4770      	bx	lr
 8000316:	bf00      	nop
 8000318:	e0001000 	.word	0xe0001000
 800031c:	20000000 	.word	0x20000000
 8000320:	10624dd3 	.word	0x10624dd3

08000324 <main>:
#endif

extern int count;

int main(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b08e      	sub	sp, #56	@ 0x38
 8000328:	af00      	add	r7, sp, #0
	char str[50];
	SystemInit();
 800032a:	f000 f951 	bl	80005d0 <SystemInit>
	LedInit(LED_RED);
 800032e:	200e      	movs	r0, #14
 8000330:	f7ff ff4a 	bl	80001c8 <LedInit>
	LedInit(LED_ORANGE);
 8000334:	200d      	movs	r0, #13
 8000336:	f7ff ff47 	bl	80001c8 <LedInit>
	LedInit(LED_GREEN);
 800033a:	200c      	movs	r0, #12
 800033c:	f7ff ff44 	bl	80001c8 <LedInit>
	LedInit(LED_BLUE);
 8000340:	200f      	movs	r0, #15
 8000342:	f7ff ff41 	bl	80001c8 <LedInit>
	UartInit(BAUD_9600);
 8000346:	f44f 5016 	mov.w	r0, #9600	@ 0x2580
 800034a:	f000 f993 	bl	8000674 <UartInit>
	SwitchInit(SWITCH);
 800034e:	2000      	movs	r0, #0
 8000350:	f000 f8c8 	bl	80004e4 <SwitchInit>
	UartPuts("--------LED_CONTROL-------\r\n");		DelayMs(30);
 8000354:	4844      	ldr	r0, [pc, #272]	@ (8000468 <main+0x144>)
 8000356:	f000 f9fd 	bl	8000754 <UartPuts>
 800035a:	201e      	movs	r0, #30
 800035c:	f7ff ffba 	bl	80002d4 <DelayMs>
	UartPuts("1. RED LED ON\r\n");					DelayMs(30);
 8000360:	4842      	ldr	r0, [pc, #264]	@ (800046c <main+0x148>)
 8000362:	f000 f9f7 	bl	8000754 <UartPuts>
 8000366:	201e      	movs	r0, #30
 8000368:	f7ff ffb4 	bl	80002d4 <DelayMs>
	UartPuts("2. RED LED OFF\r\n");					DelayMs(30);
 800036c:	4840      	ldr	r0, [pc, #256]	@ (8000470 <main+0x14c>)
 800036e:	f000 f9f1 	bl	8000754 <UartPuts>
 8000372:	201e      	movs	r0, #30
 8000374:	f7ff ffae 	bl	80002d4 <DelayMs>
	UartPuts("3. ORANGE LED ON\r\n");				DelayMs(30);
 8000378:	483e      	ldr	r0, [pc, #248]	@ (8000474 <main+0x150>)
 800037a:	f000 f9eb 	bl	8000754 <UartPuts>
 800037e:	201e      	movs	r0, #30
 8000380:	f7ff ffa8 	bl	80002d4 <DelayMs>
	UartPuts("4. ORANGE LED OFF\r\n");				DelayMs(30);
 8000384:	483c      	ldr	r0, [pc, #240]	@ (8000478 <main+0x154>)
 8000386:	f000 f9e5 	bl	8000754 <UartPuts>
 800038a:	201e      	movs	r0, #30
 800038c:	f7ff ffa2 	bl	80002d4 <DelayMs>
	UartPuts("5. GREEN LED ON\r\n");				DelayMs(30);
 8000390:	483a      	ldr	r0, [pc, #232]	@ (800047c <main+0x158>)
 8000392:	f000 f9df 	bl	8000754 <UartPuts>
 8000396:	201e      	movs	r0, #30
 8000398:	f7ff ff9c 	bl	80002d4 <DelayMs>
	UartPuts("6. GREEN LED OFF\r\n");				DelayMs(30);
 800039c:	4838      	ldr	r0, [pc, #224]	@ (8000480 <main+0x15c>)
 800039e:	f000 f9d9 	bl	8000754 <UartPuts>
 80003a2:	201e      	movs	r0, #30
 80003a4:	f7ff ff96 	bl	80002d4 <DelayMs>
	UartPuts("7. BLUE LED ON\r\n");					DelayMs(30);
 80003a8:	4836      	ldr	r0, [pc, #216]	@ (8000484 <main+0x160>)
 80003aa:	f000 f9d3 	bl	8000754 <UartPuts>
 80003ae:	201e      	movs	r0, #30
 80003b0:	f7ff ff90 	bl	80002d4 <DelayMs>
	UartPuts("8. BLUE LED OFF\r\n");				DelayMs(30);
 80003b4:	4834      	ldr	r0, [pc, #208]	@ (8000488 <main+0x164>)
 80003b6:	f000 f9cd 	bl	8000754 <UartPuts>
 80003ba:	201e      	movs	r0, #30
 80003bc:	f7ff ff8a 	bl	80002d4 <DelayMs>

	while(1)
	{
		UartGets(str);		DelayMs(30);
 80003c0:	1d3b      	adds	r3, r7, #4
 80003c2:	4618      	mov	r0, r3
 80003c4:	f000 fa3a 	bl	800083c <UartGets>
 80003c8:	201e      	movs	r0, #30
 80003ca:	f7ff ff83 	bl	80002d4 <DelayMs>
		if(str[0] == '1')
 80003ce:	793b      	ldrb	r3, [r7, #4]
 80003d0:	2b31      	cmp	r3, #49	@ 0x31
 80003d2:	d106      	bne.n	80003e2 <main+0xbe>
		{		LedOn(LED_RED);			UartPuts("LED_Red_ON");		}
 80003d4:	200e      	movs	r0, #14
 80003d6:	f7ff ff51 	bl	800027c <LedOn>
 80003da:	482c      	ldr	r0, [pc, #176]	@ (800048c <main+0x168>)
 80003dc:	f000 f9ba 	bl	8000754 <UartPuts>
 80003e0:	e008      	b.n	80003f4 <main+0xd0>
		else if(str[0] == '2')
 80003e2:	793b      	ldrb	r3, [r7, #4]
 80003e4:	2b32      	cmp	r3, #50	@ 0x32
 80003e6:	d105      	bne.n	80003f4 <main+0xd0>
		{		LedOff(LED_RED);		UartPuts("LED_Red_OFF");	}
 80003e8:	200e      	movs	r0, #14
 80003ea:	f7ff ff5d 	bl	80002a8 <LedOff>
 80003ee:	4828      	ldr	r0, [pc, #160]	@ (8000490 <main+0x16c>)
 80003f0:	f000 f9b0 	bl	8000754 <UartPuts>
		if(str[0] == '3')
 80003f4:	793b      	ldrb	r3, [r7, #4]
 80003f6:	2b33      	cmp	r3, #51	@ 0x33
 80003f8:	d106      	bne.n	8000408 <main+0xe4>
		{		LedOn(LED_ORANGE);		UartPuts("LED_Orange_ON");	}
 80003fa:	200d      	movs	r0, #13
 80003fc:	f7ff ff3e 	bl	800027c <LedOn>
 8000400:	4824      	ldr	r0, [pc, #144]	@ (8000494 <main+0x170>)
 8000402:	f000 f9a7 	bl	8000754 <UartPuts>
 8000406:	e008      	b.n	800041a <main+0xf6>
		else if(str[0] == '4')
 8000408:	793b      	ldrb	r3, [r7, #4]
 800040a:	2b34      	cmp	r3, #52	@ 0x34
 800040c:	d105      	bne.n	800041a <main+0xf6>
		{		LedOff(LED_ORANGE);		UartPuts("LED_Orange_OFF");	}
 800040e:	200d      	movs	r0, #13
 8000410:	f7ff ff4a 	bl	80002a8 <LedOff>
 8000414:	4820      	ldr	r0, [pc, #128]	@ (8000498 <main+0x174>)
 8000416:	f000 f99d 	bl	8000754 <UartPuts>
		if(str[0] == '5')
 800041a:	793b      	ldrb	r3, [r7, #4]
 800041c:	2b35      	cmp	r3, #53	@ 0x35
 800041e:	d106      	bne.n	800042e <main+0x10a>
		{		LedOn(LED_GREEN);		UartPuts("LED_Green_ON");	}
 8000420:	200c      	movs	r0, #12
 8000422:	f7ff ff2b 	bl	800027c <LedOn>
 8000426:	481d      	ldr	r0, [pc, #116]	@ (800049c <main+0x178>)
 8000428:	f000 f994 	bl	8000754 <UartPuts>
 800042c:	e008      	b.n	8000440 <main+0x11c>
		else if(str[0] == '6')
 800042e:	793b      	ldrb	r3, [r7, #4]
 8000430:	2b36      	cmp	r3, #54	@ 0x36
 8000432:	d105      	bne.n	8000440 <main+0x11c>
		{		LedOff(LED_GREEN);		UartPuts("LED_Green_Off");	}
 8000434:	200c      	movs	r0, #12
 8000436:	f7ff ff37 	bl	80002a8 <LedOff>
 800043a:	4819      	ldr	r0, [pc, #100]	@ (80004a0 <main+0x17c>)
 800043c:	f000 f98a 	bl	8000754 <UartPuts>
		if(str[0] == '7')
 8000440:	793b      	ldrb	r3, [r7, #4]
 8000442:	2b37      	cmp	r3, #55	@ 0x37
 8000444:	d106      	bne.n	8000454 <main+0x130>
		{		LedOn(LED_BLUE);		UartPuts("LED_Blue_ON");	}
 8000446:	200f      	movs	r0, #15
 8000448:	f7ff ff18 	bl	800027c <LedOn>
 800044c:	4815      	ldr	r0, [pc, #84]	@ (80004a4 <main+0x180>)
 800044e:	f000 f981 	bl	8000754 <UartPuts>
 8000452:	e7b5      	b.n	80003c0 <main+0x9c>
		else if(str[0] == '8')
 8000454:	793b      	ldrb	r3, [r7, #4]
 8000456:	2b38      	cmp	r3, #56	@ 0x38
 8000458:	d1b2      	bne.n	80003c0 <main+0x9c>
		{		LedOff(LED_BLUE);		UartPuts("LED_Blue_OFF");	}
 800045a:	200f      	movs	r0, #15
 800045c:	f7ff ff24 	bl	80002a8 <LedOff>
 8000460:	4811      	ldr	r0, [pc, #68]	@ (80004a8 <main+0x184>)
 8000462:	f000 f977 	bl	8000754 <UartPuts>
		UartGets(str);		DelayMs(30);
 8000466:	e7ab      	b.n	80003c0 <main+0x9c>
 8000468:	0800093c 	.word	0x0800093c
 800046c:	0800095c 	.word	0x0800095c
 8000470:	0800096c 	.word	0x0800096c
 8000474:	08000980 	.word	0x08000980
 8000478:	08000994 	.word	0x08000994
 800047c:	080009a8 	.word	0x080009a8
 8000480:	080009bc 	.word	0x080009bc
 8000484:	080009d0 	.word	0x080009d0
 8000488:	080009e4 	.word	0x080009e4
 800048c:	080009f8 	.word	0x080009f8
 8000490:	08000a04 	.word	0x08000a04
 8000494:	08000a10 	.word	0x08000a10
 8000498:	08000a20 	.word	0x08000a20
 800049c:	08000a30 	.word	0x08000a30
 80004a0:	08000a40 	.word	0x08000a40
 80004a4:	08000a50 	.word	0x08000a50
 80004a8:	08000a5c 	.word	0x08000a5c

080004ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004ac:	b480      	push	{r7}
 80004ae:	b083      	sub	sp, #12
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	4603      	mov	r3, r0
 80004b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	db0b      	blt.n	80004d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80004be:	79fb      	ldrb	r3, [r7, #7]
 80004c0:	f003 021f 	and.w	r2, r3, #31
 80004c4:	4906      	ldr	r1, [pc, #24]	@ (80004e0 <__NVIC_EnableIRQ+0x34>)
 80004c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004ca:	095b      	lsrs	r3, r3, #5
 80004cc:	2001      	movs	r0, #1
 80004ce:	fa00 f202 	lsl.w	r2, r0, r2
 80004d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80004d6:	bf00      	nop
 80004d8:	370c      	adds	r7, #12
 80004da:	46bd      	mov	sp, r7
 80004dc:	bc80      	pop	{r7}
 80004de:	4770      	bx	lr
 80004e0:	e000e100 	.word	0xe000e100

080004e4 <SwitchInit>:
#include "switch.h"

int count = 0;


void SwitchInit(uint32_t pin) {
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
	RCC->AHB1ENR |= BV(SWITCH_GPIO_EN);
 80004ec:	4b2a      	ldr	r3, [pc, #168]	@ (8000598 <SwitchInit+0xb4>)
 80004ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004f0:	4a29      	ldr	r2, [pc, #164]	@ (8000598 <SwitchInit+0xb4>)
 80004f2:	f043 0301 	orr.w	r3, r3, #1
 80004f6:	6313      	str	r3, [r2, #48]	@ 0x30
	SWITCH_GPIO->MODER &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 80004f8:	4b28      	ldr	r3, [pc, #160]	@ (800059c <SwitchInit+0xb8>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	687a      	ldr	r2, [r7, #4]
 80004fe:	0052      	lsls	r2, r2, #1
 8000500:	3201      	adds	r2, #1
 8000502:	2101      	movs	r1, #1
 8000504:	4091      	lsls	r1, r2
 8000506:	687a      	ldr	r2, [r7, #4]
 8000508:	0052      	lsls	r2, r2, #1
 800050a:	2001      	movs	r0, #1
 800050c:	fa00 f202 	lsl.w	r2, r0, r2
 8000510:	430a      	orrs	r2, r1
 8000512:	43d2      	mvns	r2, r2
 8000514:	4611      	mov	r1, r2
 8000516:	4a21      	ldr	r2, [pc, #132]	@ (800059c <SwitchInit+0xb8>)
 8000518:	400b      	ands	r3, r1
 800051a:	6013      	str	r3, [r2, #0]
	SWITCH_GPIO->OSPEEDR &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 800051c:	4b1f      	ldr	r3, [pc, #124]	@ (800059c <SwitchInit+0xb8>)
 800051e:	689b      	ldr	r3, [r3, #8]
 8000520:	687a      	ldr	r2, [r7, #4]
 8000522:	0052      	lsls	r2, r2, #1
 8000524:	3201      	adds	r2, #1
 8000526:	2101      	movs	r1, #1
 8000528:	4091      	lsls	r1, r2
 800052a:	687a      	ldr	r2, [r7, #4]
 800052c:	0052      	lsls	r2, r2, #1
 800052e:	2001      	movs	r0, #1
 8000530:	fa00 f202 	lsl.w	r2, r0, r2
 8000534:	430a      	orrs	r2, r1
 8000536:	43d2      	mvns	r2, r2
 8000538:	4611      	mov	r1, r2
 800053a:	4a18      	ldr	r2, [pc, #96]	@ (800059c <SwitchInit+0xb8>)
 800053c:	400b      	ands	r3, r1
 800053e:	6093      	str	r3, [r2, #8]
	SWITCH_GPIO->PUPDR &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 8000540:	4b16      	ldr	r3, [pc, #88]	@ (800059c <SwitchInit+0xb8>)
 8000542:	68db      	ldr	r3, [r3, #12]
 8000544:	687a      	ldr	r2, [r7, #4]
 8000546:	0052      	lsls	r2, r2, #1
 8000548:	3201      	adds	r2, #1
 800054a:	2101      	movs	r1, #1
 800054c:	4091      	lsls	r1, r2
 800054e:	687a      	ldr	r2, [r7, #4]
 8000550:	0052      	lsls	r2, r2, #1
 8000552:	2001      	movs	r0, #1
 8000554:	fa00 f202 	lsl.w	r2, r0, r2
 8000558:	430a      	orrs	r2, r1
 800055a:	43d2      	mvns	r2, r2
 800055c:	4611      	mov	r1, r2
 800055e:	4a0f      	ldr	r2, [pc, #60]	@ (800059c <SwitchInit+0xb8>)
 8000560:	400b      	ands	r3, r1
 8000562:	60d3      	str	r3, [r2, #12]
	EXTI->FTSR |= BV(SWITCH);
 8000564:	4b0e      	ldr	r3, [pc, #56]	@ (80005a0 <SwitchInit+0xbc>)
 8000566:	68db      	ldr	r3, [r3, #12]
 8000568:	4a0d      	ldr	r2, [pc, #52]	@ (80005a0 <SwitchInit+0xbc>)
 800056a:	f043 0301 	orr.w	r3, r3, #1
 800056e:	60d3      	str	r3, [r2, #12]
	EXTI->IMR |= BV(SWITCH);
 8000570:	4b0b      	ldr	r3, [pc, #44]	@ (80005a0 <SwitchInit+0xbc>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a0a      	ldr	r2, [pc, #40]	@ (80005a0 <SwitchInit+0xbc>)
 8000576:	f043 0301 	orr.w	r3, r3, #1
 800057a:	6013      	str	r3, [r2, #0]
	SYSCFG->EXTICR[0] &= ~(BV(3) | BV(2) | BV(1) | BV(0));
 800057c:	4b09      	ldr	r3, [pc, #36]	@ (80005a4 <SwitchInit+0xc0>)
 800057e:	689b      	ldr	r3, [r3, #8]
 8000580:	4a08      	ldr	r2, [pc, #32]	@ (80005a4 <SwitchInit+0xc0>)
 8000582:	f023 030f 	bic.w	r3, r3, #15
 8000586:	6093      	str	r3, [r2, #8]
	//NVIC->ISER[0] |= BV(EXTI0_IRQn);
	NVIC_EnableIRQ(EXTI0_IRQn);
 8000588:	2006      	movs	r0, #6
 800058a:	f7ff ff8f 	bl	80004ac <__NVIC_EnableIRQ>
}
 800058e:	bf00      	nop
 8000590:	3708      	adds	r7, #8
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	40023800 	.word	0x40023800
 800059c:	40020000 	.word	0x40020000
 80005a0:	40013c00 	.word	0x40013c00
 80005a4:	40013800 	.word	0x40013800

080005a8 <EXTI0_IRQHandler>:
}

volatile int exti0_flag = 0;

void EXTI0_IRQHandler(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
	EXTI->PR |= BV(SWITCH);
 80005ac:	4b06      	ldr	r3, [pc, #24]	@ (80005c8 <EXTI0_IRQHandler+0x20>)
 80005ae:	695b      	ldr	r3, [r3, #20]
 80005b0:	4a05      	ldr	r2, [pc, #20]	@ (80005c8 <EXTI0_IRQHandler+0x20>)
 80005b2:	f043 0301 	orr.w	r3, r3, #1
 80005b6:	6153      	str	r3, [r2, #20]
	exti0_flag = 1;
 80005b8:	4b04      	ldr	r3, [pc, #16]	@ (80005cc <EXTI0_IRQHandler+0x24>)
 80005ba:	2201      	movs	r2, #1
 80005bc:	601a      	str	r2, [r3, #0]
}
 80005be:	bf00      	nop
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bc80      	pop	{r7}
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	40013c00 	.word	0x40013c00
 80005cc:	20000020 	.word	0x20000020

080005d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  DWT_Init();
 80005d4:	f000 f802 	bl	80005dc <DWT_Init>
}
 80005d8:	bf00      	nop
 80005da:	bd80      	pop	{r7, pc}

080005dc <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80005e0:	4b14      	ldr	r3, [pc, #80]	@ (8000634 <DWT_Init+0x58>)
 80005e2:	68db      	ldr	r3, [r3, #12]
 80005e4:	4a13      	ldr	r2, [pc, #76]	@ (8000634 <DWT_Init+0x58>)
 80005e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80005ea:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80005ec:	4b11      	ldr	r3, [pc, #68]	@ (8000634 <DWT_Init+0x58>)
 80005ee:	68db      	ldr	r3, [r3, #12]
 80005f0:	4a10      	ldr	r2, [pc, #64]	@ (8000634 <DWT_Init+0x58>)
 80005f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80005f6:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80005f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000638 <DWT_Init+0x5c>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a0e      	ldr	r2, [pc, #56]	@ (8000638 <DWT_Init+0x5c>)
 80005fe:	f023 0301 	bic.w	r3, r3, #1
 8000602:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000604:	4b0c      	ldr	r3, [pc, #48]	@ (8000638 <DWT_Init+0x5c>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a0b      	ldr	r2, [pc, #44]	@ (8000638 <DWT_Init+0x5c>)
 800060a:	f043 0301 	orr.w	r3, r3, #1
 800060e:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8000610:	4b09      	ldr	r3, [pc, #36]	@ (8000638 <DWT_Init+0x5c>)
 8000612:	2200      	movs	r2, #0
 8000614:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8000616:	bf00      	nop
    __ASM volatile ("NOP");
 8000618:	bf00      	nop
    __ASM volatile ("NOP");
 800061a:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 800061c:	4b06      	ldr	r3, [pc, #24]	@ (8000638 <DWT_Init+0x5c>)
 800061e:	685b      	ldr	r3, [r3, #4]
 8000620:	2b00      	cmp	r3, #0
 8000622:	bf0c      	ite	eq
 8000624:	2301      	moveq	r3, #1
 8000626:	2300      	movne	r3, #0
 8000628:	b2db      	uxtb	r3, r3
}
 800062a:	4618      	mov	r0, r3
 800062c:	46bd      	mov	sp, r7
 800062e:	bc80      	pop	{r7}
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	e000edf0 	.word	0xe000edf0
 8000638:	e0001000 	.word	0xe0001000

0800063c <__NVIC_EnableIRQ>:
{
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
 8000642:	4603      	mov	r3, r0
 8000644:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800064a:	2b00      	cmp	r3, #0
 800064c:	db0b      	blt.n	8000666 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800064e:	79fb      	ldrb	r3, [r7, #7]
 8000650:	f003 021f 	and.w	r2, r3, #31
 8000654:	4906      	ldr	r1, [pc, #24]	@ (8000670 <__NVIC_EnableIRQ+0x34>)
 8000656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800065a:	095b      	lsrs	r3, r3, #5
 800065c:	2001      	movs	r0, #1
 800065e:	fa00 f202 	lsl.w	r2, r0, r2
 8000662:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000666:	bf00      	nop
 8000668:	370c      	adds	r7, #12
 800066a:	46bd      	mov	sp, r7
 800066c:	bc80      	pop	{r7}
 800066e:	4770      	bx	lr
 8000670:	e000e100 	.word	0xe000e100

08000674 <UartInit>:
#define TX_PIN	2
#define RX_PIN	3
#define USART_ALT_FN	7

void UartInit(uint32_t baud)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
	RCC->AHB1ENR |= BV(RCC_AHB1ENR_GPIOAEN_Pos);
 800067c:	4b32      	ldr	r3, [pc, #200]	@ (8000748 <UartInit+0xd4>)
 800067e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000680:	4a31      	ldr	r2, [pc, #196]	@ (8000748 <UartInit+0xd4>)
 8000682:	f043 0301 	orr.w	r3, r3, #1
 8000686:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIOA->AFR[0] |= ((USART_ALT_FN << GPIO_AFRL_AFSEL3_Pos) | (USART_ALT_FN << GPIO_AFRL_AFSEL2_Pos));
 8000688:	4b30      	ldr	r3, [pc, #192]	@ (800074c <UartInit+0xd8>)
 800068a:	6a1b      	ldr	r3, [r3, #32]
 800068c:	4a2f      	ldr	r2, [pc, #188]	@ (800074c <UartInit+0xd8>)
 800068e:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8000692:	6213      	str	r3, [r2, #32]
	GPIOA->MODER |= (BV(TX_PIN * 2 + 1) | BV(RX_PIN * 2 + 1));
 8000694:	4b2d      	ldr	r3, [pc, #180]	@ (800074c <UartInit+0xd8>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a2c      	ldr	r2, [pc, #176]	@ (800074c <UartInit+0xd8>)
 800069a:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 800069e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(BV(TX_PIN * 2) | BV(RX_PIN * 2));
 80006a0:	4b2a      	ldr	r3, [pc, #168]	@ (800074c <UartInit+0xd8>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a29      	ldr	r2, [pc, #164]	@ (800074c <UartInit+0xd8>)
 80006a6:	f023 0350 	bic.w	r3, r3, #80	@ 0x50
 80006aa:	6013      	str	r3, [r2, #0]
	GPIOA->OSPEEDR &= ~(BV(TX_PIN * 2) | BV(TX_PIN * 2 + 1) | BV(RX_PIN * 2) | BV(RX_PIN * 2 + 1));
 80006ac:	4b27      	ldr	r3, [pc, #156]	@ (800074c <UartInit+0xd8>)
 80006ae:	689b      	ldr	r3, [r3, #8]
 80006b0:	4a26      	ldr	r2, [pc, #152]	@ (800074c <UartInit+0xd8>)
 80006b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80006b6:	6093      	str	r3, [r2, #8]
	GPIOA->PUPDR &= ~(BV(TX_PIN * 2) | BV(TX_PIN * 2 + 1) | BV(RX_PIN * 2) | BV(RX_PIN * 2 + 1));
 80006b8:	4b24      	ldr	r3, [pc, #144]	@ (800074c <UartInit+0xd8>)
 80006ba:	68db      	ldr	r3, [r3, #12]
 80006bc:	4a23      	ldr	r2, [pc, #140]	@ (800074c <UartInit+0xd8>)
 80006be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80006c2:	60d3      	str	r3, [r2, #12]
	GPIOA->OTYPER &= ~(BV(TX_PIN) | BV(RX_PIN));
 80006c4:	4b21      	ldr	r3, [pc, #132]	@ (800074c <UartInit+0xd8>)
 80006c6:	685b      	ldr	r3, [r3, #4]
 80006c8:	4a20      	ldr	r2, [pc, #128]	@ (800074c <UartInit+0xd8>)
 80006ca:	f023 030c 	bic.w	r3, r3, #12
 80006ce:	6053      	str	r3, [r2, #4]

	RCC->APB1ENR |= BV(RCC_APB1ENR_USART2EN_Pos);
 80006d0:	4b1d      	ldr	r3, [pc, #116]	@ (8000748 <UartInit+0xd4>)
 80006d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006d4:	4a1c      	ldr	r2, [pc, #112]	@ (8000748 <UartInit+0xd4>)
 80006d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006da:	6413      	str	r3, [r2, #64]	@ 0x40
	USART2->CR1 = BV(USART_CR1_TE_Pos) | BV(USART_CR1_RE_Pos);
 80006dc:	4b1c      	ldr	r3, [pc, #112]	@ (8000750 <UartInit+0xdc>)
 80006de:	220c      	movs	r2, #12
 80006e0:	60da      	str	r2, [r3, #12]
	USART2->CR2 = 0x00000000;
 80006e2:	4b1b      	ldr	r3, [pc, #108]	@ (8000750 <UartInit+0xdc>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	611a      	str	r2, [r3, #16]
	USART2->CR3 = 0x00000000;
 80006e8:	4b19      	ldr	r3, [pc, #100]	@ (8000750 <UartInit+0xdc>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	615a      	str	r2, [r3, #20]
	switch(baud) {
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	f5b3 3fe1 	cmp.w	r3, #115200	@ 0x1c200
 80006f4:	d016      	beq.n	8000724 <UartInit+0xb0>
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	f5b3 3fe1 	cmp.w	r3, #115200	@ 0x1c200
 80006fc:	d816      	bhi.n	800072c <UartInit+0xb8>
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	f5b3 5f16 	cmp.w	r3, #9600	@ 0x2580
 8000704:	d004      	beq.n	8000710 <UartInit+0x9c>
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	f5b3 4f16 	cmp.w	r3, #38400	@ 0x9600
 800070c:	d005      	beq.n	800071a <UartInit+0xa6>
 800070e:	e00d      	b.n	800072c <UartInit+0xb8>
		case BAUD_9600:
			USART2->BRR = BAUD_BRR_9600;
 8000710:	4b0f      	ldr	r3, [pc, #60]	@ (8000750 <UartInit+0xdc>)
 8000712:	f240 6283 	movw	r2, #1667	@ 0x683
 8000716:	609a      	str	r2, [r3, #8]
			break;
 8000718:	e008      	b.n	800072c <UartInit+0xb8>
		case BAUD_38400:
			USART2->BRR = BAUD_BRR_38400;
 800071a:	4b0d      	ldr	r3, [pc, #52]	@ (8000750 <UartInit+0xdc>)
 800071c:	f240 12a1 	movw	r2, #417	@ 0x1a1
 8000720:	609a      	str	r2, [r3, #8]
			break;
 8000722:	e003      	b.n	800072c <UartInit+0xb8>
		case BAUD_115200:
			USART2->BRR = BAUD_BRR_115200;
 8000724:	4b0a      	ldr	r3, [pc, #40]	@ (8000750 <UartInit+0xdc>)
 8000726:	228b      	movs	r2, #139	@ 0x8b
 8000728:	609a      	str	r2, [r3, #8]
			break;
 800072a:	bf00      	nop
	}
	NVIC_EnableIRQ(USART2_IRQn);
 800072c:	2026      	movs	r0, #38	@ 0x26
 800072e:	f7ff ff85 	bl	800063c <__NVIC_EnableIRQ>
	USART2->CR1 |= BV(USART_CR1_UE_Pos);
 8000732:	4b07      	ldr	r3, [pc, #28]	@ (8000750 <UartInit+0xdc>)
 8000734:	68db      	ldr	r3, [r3, #12]
 8000736:	4a06      	ldr	r2, [pc, #24]	@ (8000750 <UartInit+0xdc>)
 8000738:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800073c:	60d3      	str	r3, [r2, #12]
}
 800073e:	bf00      	nop
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40023800 	.word	0x40023800
 800074c:	40020000 	.word	0x40020000
 8000750:	40004400 	.word	0x40004400

08000754 <UartPuts>:

char *tx_string;
int tx_index = 0;
int tx_complete = 0;

void UartPuts(char str1[]) {
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
	tx_string = str1;
 800075c:	4a0e      	ldr	r2, [pc, #56]	@ (8000798 <UartPuts+0x44>)
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	6013      	str	r3, [r2, #0]
	tx_index = 0;
 8000762:	4b0e      	ldr	r3, [pc, #56]	@ (800079c <UartPuts+0x48>)
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
	USART2->DR = tx_string[tx_index];
 8000768:	4b0b      	ldr	r3, [pc, #44]	@ (8000798 <UartPuts+0x44>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a0b      	ldr	r2, [pc, #44]	@ (800079c <UartPuts+0x48>)
 800076e:	6812      	ldr	r2, [r2, #0]
 8000770:	4413      	add	r3, r2
 8000772:	781a      	ldrb	r2, [r3, #0]
 8000774:	4b0a      	ldr	r3, [pc, #40]	@ (80007a0 <UartPuts+0x4c>)
 8000776:	605a      	str	r2, [r3, #4]
	tx_index++;
 8000778:	4b08      	ldr	r3, [pc, #32]	@ (800079c <UartPuts+0x48>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	3301      	adds	r3, #1
 800077e:	4a07      	ldr	r2, [pc, #28]	@ (800079c <UartPuts+0x48>)
 8000780:	6013      	str	r3, [r2, #0]
	USART2->CR1 |= BV(USART_CR1_TXEIE_Pos);
 8000782:	4b07      	ldr	r3, [pc, #28]	@ (80007a0 <UartPuts+0x4c>)
 8000784:	68db      	ldr	r3, [r3, #12]
 8000786:	4a06      	ldr	r2, [pc, #24]	@ (80007a0 <UartPuts+0x4c>)
 8000788:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800078c:	60d3      	str	r3, [r2, #12]
}
 800078e:	bf00      	nop
 8000790:	370c      	adds	r7, #12
 8000792:	46bd      	mov	sp, r7
 8000794:	bc80      	pop	{r7}
 8000796:	4770      	bx	lr
 8000798:	20000024 	.word	0x20000024
 800079c:	20000028 	.word	0x20000028
 80007a0:	40004400 	.word	0x40004400

080007a4 <USART2_IRQHandler>:

void USART2_IRQHandler(void) {
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
	if((USART2->SR & BV(USART_SR_TXE_Pos)) != 0) {
 80007a8:	4b15      	ldr	r3, [pc, #84]	@ (8000800 <USART2_IRQHandler+0x5c>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d021      	beq.n	80007f8 <USART2_IRQHandler+0x54>
		if(tx_string[tx_index] != '\0') {
 80007b4:	4b13      	ldr	r3, [pc, #76]	@ (8000804 <USART2_IRQHandler+0x60>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a13      	ldr	r2, [pc, #76]	@ (8000808 <USART2_IRQHandler+0x64>)
 80007ba:	6812      	ldr	r2, [r2, #0]
 80007bc:	4413      	add	r3, r2
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d00d      	beq.n	80007e0 <USART2_IRQHandler+0x3c>
			USART2->DR = tx_string[tx_index];
 80007c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000804 <USART2_IRQHandler+0x60>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a0f      	ldr	r2, [pc, #60]	@ (8000808 <USART2_IRQHandler+0x64>)
 80007ca:	6812      	ldr	r2, [r2, #0]
 80007cc:	4413      	add	r3, r2
 80007ce:	781a      	ldrb	r2, [r3, #0]
 80007d0:	4b0b      	ldr	r3, [pc, #44]	@ (8000800 <USART2_IRQHandler+0x5c>)
 80007d2:	605a      	str	r2, [r3, #4]
			tx_index++;
 80007d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000808 <USART2_IRQHandler+0x64>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	3301      	adds	r3, #1
 80007da:	4a0b      	ldr	r2, [pc, #44]	@ (8000808 <USART2_IRQHandler+0x64>)
 80007dc:	6013      	str	r3, [r2, #0]
			tx_string = NULL;
			tx_complete = 1;
			USART2->CR1 &= ~BV(USART_CR1_TXEIE_Pos);
		}
	}
}
 80007de:	e00b      	b.n	80007f8 <USART2_IRQHandler+0x54>
			tx_string = NULL;
 80007e0:	4b08      	ldr	r3, [pc, #32]	@ (8000804 <USART2_IRQHandler+0x60>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
			tx_complete = 1;
 80007e6:	4b09      	ldr	r3, [pc, #36]	@ (800080c <USART2_IRQHandler+0x68>)
 80007e8:	2201      	movs	r2, #1
 80007ea:	601a      	str	r2, [r3, #0]
			USART2->CR1 &= ~BV(USART_CR1_TXEIE_Pos);
 80007ec:	4b04      	ldr	r3, [pc, #16]	@ (8000800 <USART2_IRQHandler+0x5c>)
 80007ee:	68db      	ldr	r3, [r3, #12]
 80007f0:	4a03      	ldr	r2, [pc, #12]	@ (8000800 <USART2_IRQHandler+0x5c>)
 80007f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80007f6:	60d3      	str	r3, [r2, #12]
}
 80007f8:	bf00      	nop
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bc80      	pop	{r7}
 80007fe:	4770      	bx	lr
 8000800:	40004400 	.word	0x40004400
 8000804:	20000024 	.word	0x20000024
 8000808:	20000028 	.word	0x20000028
 800080c:	2000002c 	.word	0x2000002c

08000810 <UartGetch>:

uint8_t UartGetch(void) {
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
	// wait until RDR is not empty (i.e. new byte received)
	while((USART2->SR & BV(USART_SR_RXNE_Pos)) == 0)
 8000816:	bf00      	nop
 8000818:	4b07      	ldr	r3, [pc, #28]	@ (8000838 <UartGetch+0x28>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	f003 0320 	and.w	r3, r3, #32
 8000820:	2b00      	cmp	r3, #0
 8000822:	d0f9      	beq.n	8000818 <UartGetch+0x8>
		;
	// read received byte from RDR
	char ch = USART2->DR;
 8000824:	4b04      	ldr	r3, [pc, #16]	@ (8000838 <UartGetch+0x28>)
 8000826:	685b      	ldr	r3, [r3, #4]
 8000828:	71fb      	strb	r3, [r7, #7]
	return ch;
 800082a:	79fb      	ldrb	r3, [r7, #7]
}
 800082c:	4618      	mov	r0, r3
 800082e:	370c      	adds	r7, #12
 8000830:	46bd      	mov	sp, r7
 8000832:	bc80      	pop	{r7}
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	40004400 	.word	0x40004400

0800083c <UartGets>:

void UartGets(char str[]) {
 800083c:	b580      	push	{r7, lr}
 800083e:	b084      	sub	sp, #16
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
	int i=0;
 8000844:	2300      	movs	r3, #0
 8000846:	60fb      	str	r3, [r7, #12]
	char ch;
	do {
		ch = UartGetch();
 8000848:	f7ff ffe2 	bl	8000810 <UartGetch>
 800084c:	4603      	mov	r3, r0
 800084e:	72fb      	strb	r3, [r7, #11]
		str[i] = ch;
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	687a      	ldr	r2, [r7, #4]
 8000854:	4413      	add	r3, r2
 8000856:	7afa      	ldrb	r2, [r7, #11]
 8000858:	701a      	strb	r2, [r3, #0]
		i++;
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	3301      	adds	r3, #1
 800085e:	60fb      	str	r3, [r7, #12]
	} while(ch != '\r');
 8000860:	7afb      	ldrb	r3, [r7, #11]
 8000862:	2b0d      	cmp	r3, #13
 8000864:	d1f0      	bne.n	8000848 <UartGets+0xc>
	str[i] = '\n';
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	687a      	ldr	r2, [r7, #4]
 800086a:	4413      	add	r3, r2
 800086c:	220a      	movs	r2, #10
 800086e:	701a      	strb	r2, [r3, #0]
	i++;
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	3301      	adds	r3, #1
 8000874:	60fb      	str	r3, [r7, #12]
	str[i] = '\0';
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	687a      	ldr	r2, [r7, #4]
 800087a:	4413      	add	r3, r2
 800087c:	2200      	movs	r2, #0
 800087e:	701a      	strb	r2, [r3, #0]
}
 8000880:	bf00      	nop
 8000882:	3710      	adds	r7, #16
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}

08000888 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000888:	480d      	ldr	r0, [pc, #52]	@ (80008c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800088a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800088c:	f7ff fea0 	bl	80005d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000890:	480c      	ldr	r0, [pc, #48]	@ (80008c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000892:	490d      	ldr	r1, [pc, #52]	@ (80008c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000894:	4a0d      	ldr	r2, [pc, #52]	@ (80008cc <LoopForever+0xe>)
  movs r3, #0
 8000896:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000898:	e002      	b.n	80008a0 <LoopCopyDataInit>

0800089a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800089a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800089c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800089e:	3304      	adds	r3, #4

080008a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008a4:	d3f9      	bcc.n	800089a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008a6:	4a0a      	ldr	r2, [pc, #40]	@ (80008d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008a8:	4c0a      	ldr	r4, [pc, #40]	@ (80008d4 <LoopForever+0x16>)
  movs r3, #0
 80008aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008ac:	e001      	b.n	80008b2 <LoopFillZerobss>

080008ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008b0:	3204      	adds	r2, #4

080008b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008b4:	d3fb      	bcc.n	80008ae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80008b6:	f000 f811 	bl	80008dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008ba:	f7ff fd33 	bl	8000324 <main>

080008be <LoopForever>:

LoopForever:
  b LoopForever
 80008be:	e7fe      	b.n	80008be <LoopForever>
  ldr   r0, =_estack
 80008c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008c8:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80008cc:	08000a74 	.word	0x08000a74
  ldr r2, =_sbss
 80008d0:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80008d4:	20000030 	.word	0x20000030

080008d8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008d8:	e7fe      	b.n	80008d8 <ADC_IRQHandler>
	...

080008dc <__libc_init_array>:
 80008dc:	b570      	push	{r4, r5, r6, lr}
 80008de:	4d0d      	ldr	r5, [pc, #52]	@ (8000914 <__libc_init_array+0x38>)
 80008e0:	4c0d      	ldr	r4, [pc, #52]	@ (8000918 <__libc_init_array+0x3c>)
 80008e2:	1b64      	subs	r4, r4, r5
 80008e4:	10a4      	asrs	r4, r4, #2
 80008e6:	2600      	movs	r6, #0
 80008e8:	42a6      	cmp	r6, r4
 80008ea:	d109      	bne.n	8000900 <__libc_init_array+0x24>
 80008ec:	4d0b      	ldr	r5, [pc, #44]	@ (800091c <__libc_init_array+0x40>)
 80008ee:	4c0c      	ldr	r4, [pc, #48]	@ (8000920 <__libc_init_array+0x44>)
 80008f0:	f000 f818 	bl	8000924 <_init>
 80008f4:	1b64      	subs	r4, r4, r5
 80008f6:	10a4      	asrs	r4, r4, #2
 80008f8:	2600      	movs	r6, #0
 80008fa:	42a6      	cmp	r6, r4
 80008fc:	d105      	bne.n	800090a <__libc_init_array+0x2e>
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f855 3b04 	ldr.w	r3, [r5], #4
 8000904:	4798      	blx	r3
 8000906:	3601      	adds	r6, #1
 8000908:	e7ee      	b.n	80008e8 <__libc_init_array+0xc>
 800090a:	f855 3b04 	ldr.w	r3, [r5], #4
 800090e:	4798      	blx	r3
 8000910:	3601      	adds	r6, #1
 8000912:	e7f2      	b.n	80008fa <__libc_init_array+0x1e>
 8000914:	08000a6c 	.word	0x08000a6c
 8000918:	08000a6c 	.word	0x08000a6c
 800091c:	08000a6c 	.word	0x08000a6c
 8000920:	08000a70 	.word	0x08000a70

08000924 <_init>:
 8000924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000926:	bf00      	nop
 8000928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800092a:	bc08      	pop	{r3}
 800092c:	469e      	mov	lr, r3
 800092e:	4770      	bx	lr

08000930 <_fini>:
 8000930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000932:	bf00      	nop
 8000934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000936:	bc08      	pop	{r3}
 8000938:	469e      	mov	lr, r3
 800093a:	4770      	bx	lr
