
Day07_USART_Asm_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000794  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  0800091c  0800091c  0000191c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800094c  0800094c  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  0800094c  0800094c  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800094c  0800094c  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800094c  0800094c  0000194c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000950  08000950  00001950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000954  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002004  2**0
                  CONTENTS
 10 .bss          00000030  20000004  20000004  00002004  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000034  20000034  00002004  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001da5  00000000  00000000  0000202e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000078f  00000000  00000000  00003dd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000138  00000000  00000000  00004568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000d1  00000000  00000000  000046a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000183fc  00000000  00000000  00004771  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001b1e  00000000  00000000  0001cb6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008beb2  00000000  00000000  0001e68b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000aa53d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000003a4  00000000  00000000  000aa580  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000001f  00000000  00000000  000aa924  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000056  00000000  00000000  000aa943  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000904 	.word	0x08000904

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08000904 	.word	0x08000904

080001c8 <DelayMs>:
uint32_t DWT_Init(void);

#ifndef DELAY_MS
#define DELAY_MS

static inline void DelayMs(volatile uint32_t ms) {
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 80001d0:	4b0e      	ldr	r3, [pc, #56]	@ (800020c <DelayMs+0x44>)
 80001d2:	685b      	ldr	r3, [r3, #4]
 80001d4:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 80001d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000210 <DelayMs+0x48>)
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	4a0e      	ldr	r2, [pc, #56]	@ (8000214 <DelayMs+0x4c>)
 80001dc:	fba2 2303 	umull	r2, r3, r2, r3
 80001e0:	099b      	lsrs	r3, r3, #6
 80001e2:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	68ba      	ldr	r2, [r7, #8]
 80001e8:	fb02 f303 	mul.w	r3, r2, r3
 80001ec:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 80001ee:	bf00      	nop
 80001f0:	4b06      	ldr	r3, [pc, #24]	@ (800020c <DelayMs+0x44>)
 80001f2:	685a      	ldr	r2, [r3, #4]
 80001f4:	68fb      	ldr	r3, [r7, #12]
 80001f6:	1ad2      	subs	r2, r2, r3
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	429a      	cmp	r2, r3
 80001fc:	d3f8      	bcc.n	80001f0 <DelayMs+0x28>
}
 80001fe:	bf00      	nop
 8000200:	bf00      	nop
 8000202:	3714      	adds	r7, #20
 8000204:	46bd      	mov	sp, r7
 8000206:	bc80      	pop	{r7}
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	e0001000 	.word	0xe0001000
 8000210:	20000000 	.word	0x20000000
 8000214:	10624dd3 	.word	0x10624dd3

08000218 <LedInit>:
 */

#include "led.h"
#include "stm32f4xx.h"

void LedInit(uint32_t pin) {
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
	// enable gpio clock (in AHB1ENR)
	RCC->AHB1ENR |= BV(LED_GPIO_EN);
 8000220:	4b28      	ldr	r3, [pc, #160]	@ (80002c4 <LedInit+0xac>)
 8000222:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000224:	4a27      	ldr	r2, [pc, #156]	@ (80002c4 <LedInit+0xac>)
 8000226:	f043 0308 	orr.w	r3, r3, #8
 800022a:	6313      	str	r3, [r2, #48]	@ 0x30
	// set gpio pin as output (in MODER)
	LED_GPIO->MODER &= ~BV(pin * 2 + 1);
 800022c:	4b26      	ldr	r3, [pc, #152]	@ (80002c8 <LedInit+0xb0>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	687a      	ldr	r2, [r7, #4]
 8000232:	0052      	lsls	r2, r2, #1
 8000234:	3201      	adds	r2, #1
 8000236:	2101      	movs	r1, #1
 8000238:	fa01 f202 	lsl.w	r2, r1, r2
 800023c:	43d2      	mvns	r2, r2
 800023e:	4611      	mov	r1, r2
 8000240:	4a21      	ldr	r2, [pc, #132]	@ (80002c8 <LedInit+0xb0>)
 8000242:	400b      	ands	r3, r1
 8000244:	6013      	str	r3, [r2, #0]
	LED_GPIO->MODER |= BV(pin * 2);
 8000246:	4b20      	ldr	r3, [pc, #128]	@ (80002c8 <LedInit+0xb0>)
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	687a      	ldr	r2, [r7, #4]
 800024c:	0052      	lsls	r2, r2, #1
 800024e:	2101      	movs	r1, #1
 8000250:	fa01 f202 	lsl.w	r2, r1, r2
 8000254:	4611      	mov	r1, r2
 8000256:	4a1c      	ldr	r2, [pc, #112]	@ (80002c8 <LedInit+0xb0>)
 8000258:	430b      	orrs	r3, r1
 800025a:	6013      	str	r3, [r2, #0]
	// set gpio pin speed to low (in OSPEEDR)
	LED_GPIO->OSPEEDR &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 800025c:	4b1a      	ldr	r3, [pc, #104]	@ (80002c8 <LedInit+0xb0>)
 800025e:	689b      	ldr	r3, [r3, #8]
 8000260:	687a      	ldr	r2, [r7, #4]
 8000262:	0052      	lsls	r2, r2, #1
 8000264:	3201      	adds	r2, #1
 8000266:	2101      	movs	r1, #1
 8000268:	4091      	lsls	r1, r2
 800026a:	687a      	ldr	r2, [r7, #4]
 800026c:	0052      	lsls	r2, r2, #1
 800026e:	2001      	movs	r0, #1
 8000270:	fa00 f202 	lsl.w	r2, r0, r2
 8000274:	430a      	orrs	r2, r1
 8000276:	43d2      	mvns	r2, r2
 8000278:	4611      	mov	r1, r2
 800027a:	4a13      	ldr	r2, [pc, #76]	@ (80002c8 <LedInit+0xb0>)
 800027c:	400b      	ands	r3, r1
 800027e:	6093      	str	r3, [r2, #8]
	// set gpio pin no pull up, no pull down (in PUPDR)
	LED_GPIO->PUPDR &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 8000280:	4b11      	ldr	r3, [pc, #68]	@ (80002c8 <LedInit+0xb0>)
 8000282:	68db      	ldr	r3, [r3, #12]
 8000284:	687a      	ldr	r2, [r7, #4]
 8000286:	0052      	lsls	r2, r2, #1
 8000288:	3201      	adds	r2, #1
 800028a:	2101      	movs	r1, #1
 800028c:	4091      	lsls	r1, r2
 800028e:	687a      	ldr	r2, [r7, #4]
 8000290:	0052      	lsls	r2, r2, #1
 8000292:	2001      	movs	r0, #1
 8000294:	fa00 f202 	lsl.w	r2, r0, r2
 8000298:	430a      	orrs	r2, r1
 800029a:	43d2      	mvns	r2, r2
 800029c:	4611      	mov	r1, r2
 800029e:	4a0a      	ldr	r2, [pc, #40]	@ (80002c8 <LedInit+0xb0>)
 80002a0:	400b      	ands	r3, r1
 80002a2:	60d3      	str	r3, [r2, #12]
	// set gpio pin type as push-pull (in OTYPER)
	LED_GPIO->OTYPER &= ~BV(pin);
 80002a4:	4b08      	ldr	r3, [pc, #32]	@ (80002c8 <LedInit+0xb0>)
 80002a6:	685b      	ldr	r3, [r3, #4]
 80002a8:	2101      	movs	r1, #1
 80002aa:	687a      	ldr	r2, [r7, #4]
 80002ac:	fa01 f202 	lsl.w	r2, r1, r2
 80002b0:	43d2      	mvns	r2, r2
 80002b2:	4611      	mov	r1, r2
 80002b4:	4a04      	ldr	r2, [pc, #16]	@ (80002c8 <LedInit+0xb0>)
 80002b6:	400b      	ands	r3, r1
 80002b8:	6053      	str	r3, [r2, #4]
}
 80002ba:	bf00      	nop
 80002bc:	370c      	adds	r7, #12
 80002be:	46bd      	mov	sp, r7
 80002c0:	bc80      	pop	{r7}
 80002c2:	4770      	bx	lr
 80002c4:	40023800 	.word	0x40023800
 80002c8:	40020c00 	.word	0x40020c00

080002cc <LedOn>:

void LedOn(uint32_t pin) {
 80002cc:	b480      	push	{r7}
 80002ce:	b083      	sub	sp, #12
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
	// set led pin (in ODR)
	LED_GPIO->ODR |= BV(pin);
 80002d4:	4b07      	ldr	r3, [pc, #28]	@ (80002f4 <LedOn+0x28>)
 80002d6:	695b      	ldr	r3, [r3, #20]
 80002d8:	2101      	movs	r1, #1
 80002da:	687a      	ldr	r2, [r7, #4]
 80002dc:	fa01 f202 	lsl.w	r2, r1, r2
 80002e0:	4611      	mov	r1, r2
 80002e2:	4a04      	ldr	r2, [pc, #16]	@ (80002f4 <LedOn+0x28>)
 80002e4:	430b      	orrs	r3, r1
 80002e6:	6153      	str	r3, [r2, #20]
}
 80002e8:	bf00      	nop
 80002ea:	370c      	adds	r7, #12
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bc80      	pop	{r7}
 80002f0:	4770      	bx	lr
 80002f2:	bf00      	nop
 80002f4:	40020c00 	.word	0x40020c00

080002f8 <LedOff>:

void LedOff(uint32_t pin) {
 80002f8:	b480      	push	{r7}
 80002fa:	b083      	sub	sp, #12
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
	// clear led pin (in ODR)
	LED_GPIO->ODR &= ~BV(pin);
 8000300:	4b07      	ldr	r3, [pc, #28]	@ (8000320 <LedOff+0x28>)
 8000302:	695b      	ldr	r3, [r3, #20]
 8000304:	2101      	movs	r1, #1
 8000306:	687a      	ldr	r2, [r7, #4]
 8000308:	fa01 f202 	lsl.w	r2, r1, r2
 800030c:	43d2      	mvns	r2, r2
 800030e:	4611      	mov	r1, r2
 8000310:	4a03      	ldr	r2, [pc, #12]	@ (8000320 <LedOff+0x28>)
 8000312:	400b      	ands	r3, r1
 8000314:	6153      	str	r3, [r2, #20]
}
 8000316:	bf00      	nop
 8000318:	370c      	adds	r7, #12
 800031a:	46bd      	mov	sp, r7
 800031c:	bc80      	pop	{r7}
 800031e:	4770      	bx	lr
 8000320:	40020c00 	.word	0x40020c00

08000324 <LedBlink>:

void LedBlink(uint32_t pin, uint32_t delay) {
 8000324:	b580      	push	{r7, lr}
 8000326:	b082      	sub	sp, #8
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
 800032c:	6039      	str	r1, [r7, #0]
	LedOn(pin);
 800032e:	6878      	ldr	r0, [r7, #4]
 8000330:	f7ff ffcc 	bl	80002cc <LedOn>
	DelayMs(delay);
 8000334:	6838      	ldr	r0, [r7, #0]
 8000336:	f7ff ff47 	bl	80001c8 <DelayMs>
	LedOff(pin);
 800033a:	6878      	ldr	r0, [r7, #4]
 800033c:	f7ff ffdc 	bl	80002f8 <LedOff>
}
 8000340:	bf00      	nop
 8000342:	3708      	adds	r7, #8
 8000344:	46bd      	mov	sp, r7
 8000346:	bd80      	pop	{r7, pc}

08000348 <DelayMs>:
static inline void DelayMs(volatile uint32_t ms) {
 8000348:	b480      	push	{r7}
 800034a:	b085      	sub	sp, #20
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 8000350:	4b0e      	ldr	r3, [pc, #56]	@ (800038c <DelayMs+0x44>)
 8000352:	685b      	ldr	r3, [r3, #4]
 8000354:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 8000356:	4b0e      	ldr	r3, [pc, #56]	@ (8000390 <DelayMs+0x48>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	4a0e      	ldr	r2, [pc, #56]	@ (8000394 <DelayMs+0x4c>)
 800035c:	fba2 2303 	umull	r2, r3, r2, r3
 8000360:	099b      	lsrs	r3, r3, #6
 8000362:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	68ba      	ldr	r2, [r7, #8]
 8000368:	fb02 f303 	mul.w	r3, r2, r3
 800036c:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 800036e:	bf00      	nop
 8000370:	4b06      	ldr	r3, [pc, #24]	@ (800038c <DelayMs+0x44>)
 8000372:	685a      	ldr	r2, [r3, #4]
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	1ad2      	subs	r2, r2, r3
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	429a      	cmp	r2, r3
 800037c:	d3f8      	bcc.n	8000370 <DelayMs+0x28>
}
 800037e:	bf00      	nop
 8000380:	bf00      	nop
 8000382:	3714      	adds	r7, #20
 8000384:	46bd      	mov	sp, r7
 8000386:	bc80      	pop	{r7}
 8000388:	4770      	bx	lr
 800038a:	bf00      	nop
 800038c:	e0001000 	.word	0xe0001000
 8000390:	20000000 	.word	0x20000000
 8000394:	10624dd3 	.word	0x10624dd3

08000398 <main>:
#endif

extern int count;

int main(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b086      	sub	sp, #24
 800039c:	af00      	add	r7, sp, #0
	char scount[15];
	int cState = 0;
 800039e:	2300      	movs	r3, #0
 80003a0:	613b      	str	r3, [r7, #16]
	int pState = 0;
 80003a2:	2300      	movs	r3, #0
 80003a4:	617b      	str	r3, [r7, #20]
	SystemInit();
 80003a6:	f000 f8e3 	bl	8000570 <SystemInit>
	LedInit(LED_ORANGE);
 80003aa:	200d      	movs	r0, #13
 80003ac:	f7ff ff34 	bl	8000218 <LedInit>
	UartInit(BAUD_9600);
 80003b0:	f44f 5016 	mov.w	r0, #9600	@ 0x2580
 80003b4:	f000 f92e 	bl	8000614 <UartInit>
	SwitchInit(SWITCH);
 80003b8:	2000      	movs	r0, #0
 80003ba:	f000 f863 	bl	8000484 <SwitchInit>
	while(1)
	{
		while(exti0_flag == 0)
 80003be:	bf00      	nop
 80003c0:	4b1e      	ldr	r3, [pc, #120]	@ (800043c <main+0xa4>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d0fb      	beq.n	80003c0 <main+0x28>
		{ ; }

		cState = 1;
 80003c8:	2301      	movs	r3, #1
 80003ca:	613b      	str	r3, [r7, #16]
		if(cState == 1)
 80003cc:	693b      	ldr	r3, [r7, #16]
 80003ce:	2b01      	cmp	r3, #1
 80003d0:	d113      	bne.n	80003fa <main+0x62>
		{
			if(cState != pState)
 80003d2:	693a      	ldr	r2, [r7, #16]
 80003d4:	697b      	ldr	r3, [r7, #20]
 80003d6:	429a      	cmp	r2, r3
 80003d8:	d007      	beq.n	80003ea <main+0x52>
			{
				count++;
 80003da:	4b19      	ldr	r3, [pc, #100]	@ (8000440 <main+0xa8>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	3301      	adds	r3, #1
 80003e0:	4a17      	ldr	r2, [pc, #92]	@ (8000440 <main+0xa8>)
 80003e2:	6013      	str	r3, [r2, #0]
				pState = cState;
 80003e4:	693b      	ldr	r3, [r7, #16]
 80003e6:	617b      	str	r3, [r7, #20]
 80003e8:	e007      	b.n	80003fa <main+0x62>
			}
			else if(cState == pState)
 80003ea:	693a      	ldr	r2, [r7, #16]
 80003ec:	697b      	ldr	r3, [r7, #20]
 80003ee:	429a      	cmp	r2, r3
 80003f0:	d103      	bne.n	80003fa <main+0x62>
			{
				count = count;
 80003f2:	4b13      	ldr	r3, [pc, #76]	@ (8000440 <main+0xa8>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	4a12      	ldr	r2, [pc, #72]	@ (8000440 <main+0xa8>)
 80003f8:	6013      	str	r3, [r2, #0]
			}
		}

		UartPuts("Count:");
 80003fa:	4812      	ldr	r0, [pc, #72]	@ (8000444 <main+0xac>)
 80003fc:	f000 f97a 	bl	80006f4 <UartPuts>
		DelayMs(5);
 8000400:	2005      	movs	r0, #5
 8000402:	f7ff ffa1 	bl	8000348 <DelayMs>
		UartPuts(itoa(count, scount, 10));
 8000406:	4b0e      	ldr	r3, [pc, #56]	@ (8000440 <main+0xa8>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	4639      	mov	r1, r7
 800040c:	220a      	movs	r2, #10
 800040e:	4618      	mov	r0, r3
 8000410:	f000 fa0f 	bl	8000832 <itoa>
 8000414:	4603      	mov	r3, r0
 8000416:	4618      	mov	r0, r3
 8000418:	f000 f96c 	bl	80006f4 <UartPuts>
		DelayMs(5);
 800041c:	2005      	movs	r0, #5
 800041e:	f7ff ff93 	bl	8000348 <DelayMs>
		UartPuts("\r\n");
 8000422:	4809      	ldr	r0, [pc, #36]	@ (8000448 <main+0xb0>)
 8000424:	f000 f966 	bl	80006f4 <UartPuts>
		LedBlink(LED_ORANGE, 100);
 8000428:	2164      	movs	r1, #100	@ 0x64
 800042a:	200d      	movs	r0, #13
 800042c:	f7ff ff7a 	bl	8000324 <LedBlink>
		pState = 0;
 8000430:	2300      	movs	r3, #0
 8000432:	617b      	str	r3, [r7, #20]
		exti0_flag = 0;
 8000434:	4b01      	ldr	r3, [pc, #4]	@ (800043c <main+0xa4>)
 8000436:	2200      	movs	r2, #0
 8000438:	601a      	str	r2, [r3, #0]
	{
 800043a:	e7c0      	b.n	80003be <main+0x26>
 800043c:	20000024 	.word	0x20000024
 8000440:	20000020 	.word	0x20000020
 8000444:	0800091c 	.word	0x0800091c
 8000448:	08000924 	.word	0x08000924

0800044c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800044c:	b480      	push	{r7}
 800044e:	b083      	sub	sp, #12
 8000450:	af00      	add	r7, sp, #0
 8000452:	4603      	mov	r3, r0
 8000454:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800045a:	2b00      	cmp	r3, #0
 800045c:	db0b      	blt.n	8000476 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800045e:	79fb      	ldrb	r3, [r7, #7]
 8000460:	f003 021f 	and.w	r2, r3, #31
 8000464:	4906      	ldr	r1, [pc, #24]	@ (8000480 <__NVIC_EnableIRQ+0x34>)
 8000466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800046a:	095b      	lsrs	r3, r3, #5
 800046c:	2001      	movs	r0, #1
 800046e:	fa00 f202 	lsl.w	r2, r0, r2
 8000472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000476:	bf00      	nop
 8000478:	370c      	adds	r7, #12
 800047a:	46bd      	mov	sp, r7
 800047c:	bc80      	pop	{r7}
 800047e:	4770      	bx	lr
 8000480:	e000e100 	.word	0xe000e100

08000484 <SwitchInit>:
#include "switch.h"

int count = 0;


void SwitchInit(uint32_t pin) {
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
	RCC->AHB1ENR |= BV(SWITCH_GPIO_EN);
 800048c:	4b2a      	ldr	r3, [pc, #168]	@ (8000538 <SwitchInit+0xb4>)
 800048e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000490:	4a29      	ldr	r2, [pc, #164]	@ (8000538 <SwitchInit+0xb4>)
 8000492:	f043 0301 	orr.w	r3, r3, #1
 8000496:	6313      	str	r3, [r2, #48]	@ 0x30
	SWITCH_GPIO->MODER &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 8000498:	4b28      	ldr	r3, [pc, #160]	@ (800053c <SwitchInit+0xb8>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	687a      	ldr	r2, [r7, #4]
 800049e:	0052      	lsls	r2, r2, #1
 80004a0:	3201      	adds	r2, #1
 80004a2:	2101      	movs	r1, #1
 80004a4:	4091      	lsls	r1, r2
 80004a6:	687a      	ldr	r2, [r7, #4]
 80004a8:	0052      	lsls	r2, r2, #1
 80004aa:	2001      	movs	r0, #1
 80004ac:	fa00 f202 	lsl.w	r2, r0, r2
 80004b0:	430a      	orrs	r2, r1
 80004b2:	43d2      	mvns	r2, r2
 80004b4:	4611      	mov	r1, r2
 80004b6:	4a21      	ldr	r2, [pc, #132]	@ (800053c <SwitchInit+0xb8>)
 80004b8:	400b      	ands	r3, r1
 80004ba:	6013      	str	r3, [r2, #0]
	SWITCH_GPIO->OSPEEDR &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 80004bc:	4b1f      	ldr	r3, [pc, #124]	@ (800053c <SwitchInit+0xb8>)
 80004be:	689b      	ldr	r3, [r3, #8]
 80004c0:	687a      	ldr	r2, [r7, #4]
 80004c2:	0052      	lsls	r2, r2, #1
 80004c4:	3201      	adds	r2, #1
 80004c6:	2101      	movs	r1, #1
 80004c8:	4091      	lsls	r1, r2
 80004ca:	687a      	ldr	r2, [r7, #4]
 80004cc:	0052      	lsls	r2, r2, #1
 80004ce:	2001      	movs	r0, #1
 80004d0:	fa00 f202 	lsl.w	r2, r0, r2
 80004d4:	430a      	orrs	r2, r1
 80004d6:	43d2      	mvns	r2, r2
 80004d8:	4611      	mov	r1, r2
 80004da:	4a18      	ldr	r2, [pc, #96]	@ (800053c <SwitchInit+0xb8>)
 80004dc:	400b      	ands	r3, r1
 80004de:	6093      	str	r3, [r2, #8]
	SWITCH_GPIO->PUPDR &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 80004e0:	4b16      	ldr	r3, [pc, #88]	@ (800053c <SwitchInit+0xb8>)
 80004e2:	68db      	ldr	r3, [r3, #12]
 80004e4:	687a      	ldr	r2, [r7, #4]
 80004e6:	0052      	lsls	r2, r2, #1
 80004e8:	3201      	adds	r2, #1
 80004ea:	2101      	movs	r1, #1
 80004ec:	4091      	lsls	r1, r2
 80004ee:	687a      	ldr	r2, [r7, #4]
 80004f0:	0052      	lsls	r2, r2, #1
 80004f2:	2001      	movs	r0, #1
 80004f4:	fa00 f202 	lsl.w	r2, r0, r2
 80004f8:	430a      	orrs	r2, r1
 80004fa:	43d2      	mvns	r2, r2
 80004fc:	4611      	mov	r1, r2
 80004fe:	4a0f      	ldr	r2, [pc, #60]	@ (800053c <SwitchInit+0xb8>)
 8000500:	400b      	ands	r3, r1
 8000502:	60d3      	str	r3, [r2, #12]
	EXTI->FTSR |= BV(SWITCH);
 8000504:	4b0e      	ldr	r3, [pc, #56]	@ (8000540 <SwitchInit+0xbc>)
 8000506:	68db      	ldr	r3, [r3, #12]
 8000508:	4a0d      	ldr	r2, [pc, #52]	@ (8000540 <SwitchInit+0xbc>)
 800050a:	f043 0301 	orr.w	r3, r3, #1
 800050e:	60d3      	str	r3, [r2, #12]
	EXTI->IMR |= BV(SWITCH);
 8000510:	4b0b      	ldr	r3, [pc, #44]	@ (8000540 <SwitchInit+0xbc>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4a0a      	ldr	r2, [pc, #40]	@ (8000540 <SwitchInit+0xbc>)
 8000516:	f043 0301 	orr.w	r3, r3, #1
 800051a:	6013      	str	r3, [r2, #0]
	SYSCFG->EXTICR[0] &= ~(BV(3) | BV(2) | BV(1) | BV(0));
 800051c:	4b09      	ldr	r3, [pc, #36]	@ (8000544 <SwitchInit+0xc0>)
 800051e:	689b      	ldr	r3, [r3, #8]
 8000520:	4a08      	ldr	r2, [pc, #32]	@ (8000544 <SwitchInit+0xc0>)
 8000522:	f023 030f 	bic.w	r3, r3, #15
 8000526:	6093      	str	r3, [r2, #8]
	//NVIC->ISER[0] |= BV(EXTI0_IRQn);
	NVIC_EnableIRQ(EXTI0_IRQn);
 8000528:	2006      	movs	r0, #6
 800052a:	f7ff ff8f 	bl	800044c <__NVIC_EnableIRQ>
}
 800052e:	bf00      	nop
 8000530:	3708      	adds	r7, #8
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	40023800 	.word	0x40023800
 800053c:	40020000 	.word	0x40020000
 8000540:	40013c00 	.word	0x40013c00
 8000544:	40013800 	.word	0x40013800

08000548 <EXTI0_IRQHandler>:
}

volatile int exti0_flag = 0;

void EXTI0_IRQHandler(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
	EXTI->PR |= BV(SWITCH);
 800054c:	4b06      	ldr	r3, [pc, #24]	@ (8000568 <EXTI0_IRQHandler+0x20>)
 800054e:	695b      	ldr	r3, [r3, #20]
 8000550:	4a05      	ldr	r2, [pc, #20]	@ (8000568 <EXTI0_IRQHandler+0x20>)
 8000552:	f043 0301 	orr.w	r3, r3, #1
 8000556:	6153      	str	r3, [r2, #20]
	exti0_flag = 1;
 8000558:	4b04      	ldr	r3, [pc, #16]	@ (800056c <EXTI0_IRQHandler+0x24>)
 800055a:	2201      	movs	r2, #1
 800055c:	601a      	str	r2, [r3, #0]
}
 800055e:	bf00      	nop
 8000560:	46bd      	mov	sp, r7
 8000562:	bc80      	pop	{r7}
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop
 8000568:	40013c00 	.word	0x40013c00
 800056c:	20000024 	.word	0x20000024

08000570 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  DWT_Init();
 8000574:	f000 f802 	bl	800057c <DWT_Init>
}
 8000578:	bf00      	nop
 800057a:	bd80      	pop	{r7, pc}

0800057c <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000580:	4b14      	ldr	r3, [pc, #80]	@ (80005d4 <DWT_Init+0x58>)
 8000582:	68db      	ldr	r3, [r3, #12]
 8000584:	4a13      	ldr	r2, [pc, #76]	@ (80005d4 <DWT_Init+0x58>)
 8000586:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800058a:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 800058c:	4b11      	ldr	r3, [pc, #68]	@ (80005d4 <DWT_Init+0x58>)
 800058e:	68db      	ldr	r3, [r3, #12]
 8000590:	4a10      	ldr	r2, [pc, #64]	@ (80005d4 <DWT_Init+0x58>)
 8000592:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000596:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000598:	4b0f      	ldr	r3, [pc, #60]	@ (80005d8 <DWT_Init+0x5c>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a0e      	ldr	r2, [pc, #56]	@ (80005d8 <DWT_Init+0x5c>)
 800059e:	f023 0301 	bic.w	r3, r3, #1
 80005a2:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80005a4:	4b0c      	ldr	r3, [pc, #48]	@ (80005d8 <DWT_Init+0x5c>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a0b      	ldr	r2, [pc, #44]	@ (80005d8 <DWT_Init+0x5c>)
 80005aa:	f043 0301 	orr.w	r3, r3, #1
 80005ae:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 80005b0:	4b09      	ldr	r3, [pc, #36]	@ (80005d8 <DWT_Init+0x5c>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 80005b6:	bf00      	nop
    __ASM volatile ("NOP");
 80005b8:	bf00      	nop
    __ASM volatile ("NOP");
 80005ba:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 80005bc:	4b06      	ldr	r3, [pc, #24]	@ (80005d8 <DWT_Init+0x5c>)
 80005be:	685b      	ldr	r3, [r3, #4]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	bf0c      	ite	eq
 80005c4:	2301      	moveq	r3, #1
 80005c6:	2300      	movne	r3, #0
 80005c8:	b2db      	uxtb	r3, r3
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bc80      	pop	{r7}
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	e000edf0 	.word	0xe000edf0
 80005d8:	e0001000 	.word	0xe0001000

080005dc <__NVIC_EnableIRQ>:
{
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	db0b      	blt.n	8000606 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005ee:	79fb      	ldrb	r3, [r7, #7]
 80005f0:	f003 021f 	and.w	r2, r3, #31
 80005f4:	4906      	ldr	r1, [pc, #24]	@ (8000610 <__NVIC_EnableIRQ+0x34>)
 80005f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005fa:	095b      	lsrs	r3, r3, #5
 80005fc:	2001      	movs	r0, #1
 80005fe:	fa00 f202 	lsl.w	r2, r0, r2
 8000602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000606:	bf00      	nop
 8000608:	370c      	adds	r7, #12
 800060a:	46bd      	mov	sp, r7
 800060c:	bc80      	pop	{r7}
 800060e:	4770      	bx	lr
 8000610:	e000e100 	.word	0xe000e100

08000614 <UartInit>:
#define TX_PIN	2
#define RX_PIN	3
#define USART_ALT_FN	7

void UartInit(uint32_t baud)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
	RCC->AHB1ENR |= BV(RCC_AHB1ENR_GPIOAEN_Pos);
 800061c:	4b32      	ldr	r3, [pc, #200]	@ (80006e8 <UartInit+0xd4>)
 800061e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000620:	4a31      	ldr	r2, [pc, #196]	@ (80006e8 <UartInit+0xd4>)
 8000622:	f043 0301 	orr.w	r3, r3, #1
 8000626:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIOA->AFR[0] |= ((USART_ALT_FN << GPIO_AFRL_AFSEL3_Pos) | (USART_ALT_FN << GPIO_AFRL_AFSEL2_Pos));
 8000628:	4b30      	ldr	r3, [pc, #192]	@ (80006ec <UartInit+0xd8>)
 800062a:	6a1b      	ldr	r3, [r3, #32]
 800062c:	4a2f      	ldr	r2, [pc, #188]	@ (80006ec <UartInit+0xd8>)
 800062e:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8000632:	6213      	str	r3, [r2, #32]
	GPIOA->MODER |= (BV(TX_PIN * 2 + 1) | BV(RX_PIN * 2 + 1));
 8000634:	4b2d      	ldr	r3, [pc, #180]	@ (80006ec <UartInit+0xd8>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a2c      	ldr	r2, [pc, #176]	@ (80006ec <UartInit+0xd8>)
 800063a:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 800063e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(BV(TX_PIN * 2) | BV(RX_PIN * 2));
 8000640:	4b2a      	ldr	r3, [pc, #168]	@ (80006ec <UartInit+0xd8>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a29      	ldr	r2, [pc, #164]	@ (80006ec <UartInit+0xd8>)
 8000646:	f023 0350 	bic.w	r3, r3, #80	@ 0x50
 800064a:	6013      	str	r3, [r2, #0]
	GPIOA->OSPEEDR &= ~(BV(TX_PIN * 2) | BV(TX_PIN * 2 + 1) | BV(RX_PIN * 2) | BV(RX_PIN * 2 + 1));
 800064c:	4b27      	ldr	r3, [pc, #156]	@ (80006ec <UartInit+0xd8>)
 800064e:	689b      	ldr	r3, [r3, #8]
 8000650:	4a26      	ldr	r2, [pc, #152]	@ (80006ec <UartInit+0xd8>)
 8000652:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000656:	6093      	str	r3, [r2, #8]
	GPIOA->PUPDR &= ~(BV(TX_PIN * 2) | BV(TX_PIN * 2 + 1) | BV(RX_PIN * 2) | BV(RX_PIN * 2 + 1));
 8000658:	4b24      	ldr	r3, [pc, #144]	@ (80006ec <UartInit+0xd8>)
 800065a:	68db      	ldr	r3, [r3, #12]
 800065c:	4a23      	ldr	r2, [pc, #140]	@ (80006ec <UartInit+0xd8>)
 800065e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000662:	60d3      	str	r3, [r2, #12]
	GPIOA->OTYPER &= ~(BV(TX_PIN) | BV(RX_PIN));
 8000664:	4b21      	ldr	r3, [pc, #132]	@ (80006ec <UartInit+0xd8>)
 8000666:	685b      	ldr	r3, [r3, #4]
 8000668:	4a20      	ldr	r2, [pc, #128]	@ (80006ec <UartInit+0xd8>)
 800066a:	f023 030c 	bic.w	r3, r3, #12
 800066e:	6053      	str	r3, [r2, #4]

	RCC->APB1ENR |= BV(RCC_APB1ENR_USART2EN_Pos);
 8000670:	4b1d      	ldr	r3, [pc, #116]	@ (80006e8 <UartInit+0xd4>)
 8000672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000674:	4a1c      	ldr	r2, [pc, #112]	@ (80006e8 <UartInit+0xd4>)
 8000676:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800067a:	6413      	str	r3, [r2, #64]	@ 0x40
	USART2->CR1 = BV(USART_CR1_TE_Pos) | BV(USART_CR1_RE_Pos);
 800067c:	4b1c      	ldr	r3, [pc, #112]	@ (80006f0 <UartInit+0xdc>)
 800067e:	220c      	movs	r2, #12
 8000680:	60da      	str	r2, [r3, #12]
	USART2->CR2 = 0x00000000;
 8000682:	4b1b      	ldr	r3, [pc, #108]	@ (80006f0 <UartInit+0xdc>)
 8000684:	2200      	movs	r2, #0
 8000686:	611a      	str	r2, [r3, #16]
	USART2->CR3 = 0x00000000;
 8000688:	4b19      	ldr	r3, [pc, #100]	@ (80006f0 <UartInit+0xdc>)
 800068a:	2200      	movs	r2, #0
 800068c:	615a      	str	r2, [r3, #20]
	switch(baud) {
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	f5b3 3fe1 	cmp.w	r3, #115200	@ 0x1c200
 8000694:	d016      	beq.n	80006c4 <UartInit+0xb0>
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	f5b3 3fe1 	cmp.w	r3, #115200	@ 0x1c200
 800069c:	d816      	bhi.n	80006cc <UartInit+0xb8>
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	f5b3 5f16 	cmp.w	r3, #9600	@ 0x2580
 80006a4:	d004      	beq.n	80006b0 <UartInit+0x9c>
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	f5b3 4f16 	cmp.w	r3, #38400	@ 0x9600
 80006ac:	d005      	beq.n	80006ba <UartInit+0xa6>
 80006ae:	e00d      	b.n	80006cc <UartInit+0xb8>
		case BAUD_9600:
			USART2->BRR = BAUD_BRR_9600;
 80006b0:	4b0f      	ldr	r3, [pc, #60]	@ (80006f0 <UartInit+0xdc>)
 80006b2:	f240 6283 	movw	r2, #1667	@ 0x683
 80006b6:	609a      	str	r2, [r3, #8]
			break;
 80006b8:	e008      	b.n	80006cc <UartInit+0xb8>
		case BAUD_38400:
			USART2->BRR = BAUD_BRR_38400;
 80006ba:	4b0d      	ldr	r3, [pc, #52]	@ (80006f0 <UartInit+0xdc>)
 80006bc:	f240 12a1 	movw	r2, #417	@ 0x1a1
 80006c0:	609a      	str	r2, [r3, #8]
			break;
 80006c2:	e003      	b.n	80006cc <UartInit+0xb8>
		case BAUD_115200:
			USART2->BRR = BAUD_BRR_115200;
 80006c4:	4b0a      	ldr	r3, [pc, #40]	@ (80006f0 <UartInit+0xdc>)
 80006c6:	228b      	movs	r2, #139	@ 0x8b
 80006c8:	609a      	str	r2, [r3, #8]
			break;
 80006ca:	bf00      	nop
	}
	NVIC_EnableIRQ(USART2_IRQn);
 80006cc:	2026      	movs	r0, #38	@ 0x26
 80006ce:	f7ff ff85 	bl	80005dc <__NVIC_EnableIRQ>
	USART2->CR1 |= BV(USART_CR1_UE_Pos);
 80006d2:	4b07      	ldr	r3, [pc, #28]	@ (80006f0 <UartInit+0xdc>)
 80006d4:	68db      	ldr	r3, [r3, #12]
 80006d6:	4a06      	ldr	r2, [pc, #24]	@ (80006f0 <UartInit+0xdc>)
 80006d8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80006dc:	60d3      	str	r3, [r2, #12]
}
 80006de:	bf00      	nop
 80006e0:	3708      	adds	r7, #8
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	40023800 	.word	0x40023800
 80006ec:	40020000 	.word	0x40020000
 80006f0:	40004400 	.word	0x40004400

080006f4 <UartPuts>:

char *tx_string;
int tx_index = 0;
int tx_complete = 0;

void UartPuts(char str[]) {
 80006f4:	b480      	push	{r7}
 80006f6:	b083      	sub	sp, #12
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
	tx_string = str;
 80006fc:	4a0e      	ldr	r2, [pc, #56]	@ (8000738 <UartPuts+0x44>)
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	6013      	str	r3, [r2, #0]
	tx_index = 0;
 8000702:	4b0e      	ldr	r3, [pc, #56]	@ (800073c <UartPuts+0x48>)
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
	USART2->DR = tx_string[tx_index];
 8000708:	4b0b      	ldr	r3, [pc, #44]	@ (8000738 <UartPuts+0x44>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a0b      	ldr	r2, [pc, #44]	@ (800073c <UartPuts+0x48>)
 800070e:	6812      	ldr	r2, [r2, #0]
 8000710:	4413      	add	r3, r2
 8000712:	781a      	ldrb	r2, [r3, #0]
 8000714:	4b0a      	ldr	r3, [pc, #40]	@ (8000740 <UartPuts+0x4c>)
 8000716:	605a      	str	r2, [r3, #4]
	tx_index++;
 8000718:	4b08      	ldr	r3, [pc, #32]	@ (800073c <UartPuts+0x48>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	3301      	adds	r3, #1
 800071e:	4a07      	ldr	r2, [pc, #28]	@ (800073c <UartPuts+0x48>)
 8000720:	6013      	str	r3, [r2, #0]
	USART2->CR1 |= BV(USART_CR1_TXEIE_Pos);
 8000722:	4b07      	ldr	r3, [pc, #28]	@ (8000740 <UartPuts+0x4c>)
 8000724:	68db      	ldr	r3, [r3, #12]
 8000726:	4a06      	ldr	r2, [pc, #24]	@ (8000740 <UartPuts+0x4c>)
 8000728:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800072c:	60d3      	str	r3, [r2, #12]
}
 800072e:	bf00      	nop
 8000730:	370c      	adds	r7, #12
 8000732:	46bd      	mov	sp, r7
 8000734:	bc80      	pop	{r7}
 8000736:	4770      	bx	lr
 8000738:	20000028 	.word	0x20000028
 800073c:	2000002c 	.word	0x2000002c
 8000740:	40004400 	.word	0x40004400

08000744 <USART2_IRQHandler>:

void USART2_IRQHandler(void) {
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
	if((USART2->SR & BV(USART_SR_TXE_Pos)) != 0) {
 8000748:	4b15      	ldr	r3, [pc, #84]	@ (80007a0 <USART2_IRQHandler+0x5c>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000750:	2b00      	cmp	r3, #0
 8000752:	d021      	beq.n	8000798 <USART2_IRQHandler+0x54>
		if(tx_string[tx_index] != '\0') {
 8000754:	4b13      	ldr	r3, [pc, #76]	@ (80007a4 <USART2_IRQHandler+0x60>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a13      	ldr	r2, [pc, #76]	@ (80007a8 <USART2_IRQHandler+0x64>)
 800075a:	6812      	ldr	r2, [r2, #0]
 800075c:	4413      	add	r3, r2
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d00d      	beq.n	8000780 <USART2_IRQHandler+0x3c>
			USART2->DR = tx_string[tx_index];
 8000764:	4b0f      	ldr	r3, [pc, #60]	@ (80007a4 <USART2_IRQHandler+0x60>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a0f      	ldr	r2, [pc, #60]	@ (80007a8 <USART2_IRQHandler+0x64>)
 800076a:	6812      	ldr	r2, [r2, #0]
 800076c:	4413      	add	r3, r2
 800076e:	781a      	ldrb	r2, [r3, #0]
 8000770:	4b0b      	ldr	r3, [pc, #44]	@ (80007a0 <USART2_IRQHandler+0x5c>)
 8000772:	605a      	str	r2, [r3, #4]
			tx_index++;
 8000774:	4b0c      	ldr	r3, [pc, #48]	@ (80007a8 <USART2_IRQHandler+0x64>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	3301      	adds	r3, #1
 800077a:	4a0b      	ldr	r2, [pc, #44]	@ (80007a8 <USART2_IRQHandler+0x64>)
 800077c:	6013      	str	r3, [r2, #0]
			tx_string = NULL;
			tx_complete = 1;
			USART2->CR1 &= ~BV(USART_CR1_TXEIE_Pos);
		}
	}
}
 800077e:	e00b      	b.n	8000798 <USART2_IRQHandler+0x54>
			tx_string = NULL;
 8000780:	4b08      	ldr	r3, [pc, #32]	@ (80007a4 <USART2_IRQHandler+0x60>)
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
			tx_complete = 1;
 8000786:	4b09      	ldr	r3, [pc, #36]	@ (80007ac <USART2_IRQHandler+0x68>)
 8000788:	2201      	movs	r2, #1
 800078a:	601a      	str	r2, [r3, #0]
			USART2->CR1 &= ~BV(USART_CR1_TXEIE_Pos);
 800078c:	4b04      	ldr	r3, [pc, #16]	@ (80007a0 <USART2_IRQHandler+0x5c>)
 800078e:	68db      	ldr	r3, [r3, #12]
 8000790:	4a03      	ldr	r2, [pc, #12]	@ (80007a0 <USART2_IRQHandler+0x5c>)
 8000792:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000796:	60d3      	str	r3, [r2, #12]
}
 8000798:	bf00      	nop
 800079a:	46bd      	mov	sp, r7
 800079c:	bc80      	pop	{r7}
 800079e:	4770      	bx	lr
 80007a0:	40004400 	.word	0x40004400
 80007a4:	20000028 	.word	0x20000028
 80007a8:	2000002c 	.word	0x2000002c
 80007ac:	20000030 	.word	0x20000030

080007b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007b0:	480d      	ldr	r0, [pc, #52]	@ (80007e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007b2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80007b4:	f7ff fedc 	bl	8000570 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007b8:	480c      	ldr	r0, [pc, #48]	@ (80007ec <LoopForever+0x6>)
  ldr r1, =_edata
 80007ba:	490d      	ldr	r1, [pc, #52]	@ (80007f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007bc:	4a0d      	ldr	r2, [pc, #52]	@ (80007f4 <LoopForever+0xe>)
  movs r3, #0
 80007be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007c0:	e002      	b.n	80007c8 <LoopCopyDataInit>

080007c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007c6:	3304      	adds	r3, #4

080007c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007cc:	d3f9      	bcc.n	80007c2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007ce:	4a0a      	ldr	r2, [pc, #40]	@ (80007f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007d0:	4c0a      	ldr	r4, [pc, #40]	@ (80007fc <LoopForever+0x16>)
  movs r3, #0
 80007d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007d4:	e001      	b.n	80007da <LoopFillZerobss>

080007d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007d8:	3204      	adds	r2, #4

080007da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007dc:	d3fb      	bcc.n	80007d6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80007de:	f000 f86d 	bl	80008bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007e2:	f7ff fdd9 	bl	8000398 <main>

080007e6 <LoopForever>:

LoopForever:
  b LoopForever
 80007e6:	e7fe      	b.n	80007e6 <LoopForever>
  ldr   r0, =_estack
 80007e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80007ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007f0:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80007f4:	08000954 	.word	0x08000954
  ldr r2, =_sbss
 80007f8:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80007fc:	20000034 	.word	0x20000034

08000800 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000800:	e7fe      	b.n	8000800 <ADC_IRQHandler>

08000802 <__itoa>:
 8000802:	1e93      	subs	r3, r2, #2
 8000804:	2b22      	cmp	r3, #34	@ 0x22
 8000806:	b510      	push	{r4, lr}
 8000808:	460c      	mov	r4, r1
 800080a:	d904      	bls.n	8000816 <__itoa+0x14>
 800080c:	2300      	movs	r3, #0
 800080e:	700b      	strb	r3, [r1, #0]
 8000810:	461c      	mov	r4, r3
 8000812:	4620      	mov	r0, r4
 8000814:	bd10      	pop	{r4, pc}
 8000816:	2a0a      	cmp	r2, #10
 8000818:	d109      	bne.n	800082e <__itoa+0x2c>
 800081a:	2800      	cmp	r0, #0
 800081c:	da07      	bge.n	800082e <__itoa+0x2c>
 800081e:	232d      	movs	r3, #45	@ 0x2d
 8000820:	700b      	strb	r3, [r1, #0]
 8000822:	4240      	negs	r0, r0
 8000824:	2101      	movs	r1, #1
 8000826:	4421      	add	r1, r4
 8000828:	f000 f806 	bl	8000838 <__utoa>
 800082c:	e7f1      	b.n	8000812 <__itoa+0x10>
 800082e:	2100      	movs	r1, #0
 8000830:	e7f9      	b.n	8000826 <__itoa+0x24>

08000832 <itoa>:
 8000832:	f7ff bfe6 	b.w	8000802 <__itoa>
	...

08000838 <__utoa>:
 8000838:	b5f0      	push	{r4, r5, r6, r7, lr}
 800083a:	4c1f      	ldr	r4, [pc, #124]	@ (80008b8 <__utoa+0x80>)
 800083c:	b08b      	sub	sp, #44	@ 0x2c
 800083e:	4605      	mov	r5, r0
 8000840:	460b      	mov	r3, r1
 8000842:	466e      	mov	r6, sp
 8000844:	f104 0c20 	add.w	ip, r4, #32
 8000848:	6820      	ldr	r0, [r4, #0]
 800084a:	6861      	ldr	r1, [r4, #4]
 800084c:	4637      	mov	r7, r6
 800084e:	c703      	stmia	r7!, {r0, r1}
 8000850:	3408      	adds	r4, #8
 8000852:	4564      	cmp	r4, ip
 8000854:	463e      	mov	r6, r7
 8000856:	d1f7      	bne.n	8000848 <__utoa+0x10>
 8000858:	7921      	ldrb	r1, [r4, #4]
 800085a:	7139      	strb	r1, [r7, #4]
 800085c:	1e91      	subs	r1, r2, #2
 800085e:	6820      	ldr	r0, [r4, #0]
 8000860:	6038      	str	r0, [r7, #0]
 8000862:	2922      	cmp	r1, #34	@ 0x22
 8000864:	f04f 0100 	mov.w	r1, #0
 8000868:	d904      	bls.n	8000874 <__utoa+0x3c>
 800086a:	7019      	strb	r1, [r3, #0]
 800086c:	460b      	mov	r3, r1
 800086e:	4618      	mov	r0, r3
 8000870:	b00b      	add	sp, #44	@ 0x2c
 8000872:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000874:	1e58      	subs	r0, r3, #1
 8000876:	4684      	mov	ip, r0
 8000878:	fbb5 f7f2 	udiv	r7, r5, r2
 800087c:	fb02 5617 	mls	r6, r2, r7, r5
 8000880:	3628      	adds	r6, #40	@ 0x28
 8000882:	446e      	add	r6, sp
 8000884:	460c      	mov	r4, r1
 8000886:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800088a:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800088e:	462e      	mov	r6, r5
 8000890:	42b2      	cmp	r2, r6
 8000892:	f101 0101 	add.w	r1, r1, #1
 8000896:	463d      	mov	r5, r7
 8000898:	d9ee      	bls.n	8000878 <__utoa+0x40>
 800089a:	2200      	movs	r2, #0
 800089c:	545a      	strb	r2, [r3, r1]
 800089e:	1919      	adds	r1, r3, r4
 80008a0:	1aa5      	subs	r5, r4, r2
 80008a2:	42aa      	cmp	r2, r5
 80008a4:	dae3      	bge.n	800086e <__utoa+0x36>
 80008a6:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80008aa:	780e      	ldrb	r6, [r1, #0]
 80008ac:	7006      	strb	r6, [r0, #0]
 80008ae:	3201      	adds	r2, #1
 80008b0:	f801 5901 	strb.w	r5, [r1], #-1
 80008b4:	e7f4      	b.n	80008a0 <__utoa+0x68>
 80008b6:	bf00      	nop
 80008b8:	08000927 	.word	0x08000927

080008bc <__libc_init_array>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	4d0d      	ldr	r5, [pc, #52]	@ (80008f4 <__libc_init_array+0x38>)
 80008c0:	4c0d      	ldr	r4, [pc, #52]	@ (80008f8 <__libc_init_array+0x3c>)
 80008c2:	1b64      	subs	r4, r4, r5
 80008c4:	10a4      	asrs	r4, r4, #2
 80008c6:	2600      	movs	r6, #0
 80008c8:	42a6      	cmp	r6, r4
 80008ca:	d109      	bne.n	80008e0 <__libc_init_array+0x24>
 80008cc:	4d0b      	ldr	r5, [pc, #44]	@ (80008fc <__libc_init_array+0x40>)
 80008ce:	4c0c      	ldr	r4, [pc, #48]	@ (8000900 <__libc_init_array+0x44>)
 80008d0:	f000 f818 	bl	8000904 <_init>
 80008d4:	1b64      	subs	r4, r4, r5
 80008d6:	10a4      	asrs	r4, r4, #2
 80008d8:	2600      	movs	r6, #0
 80008da:	42a6      	cmp	r6, r4
 80008dc:	d105      	bne.n	80008ea <__libc_init_array+0x2e>
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80008e4:	4798      	blx	r3
 80008e6:	3601      	adds	r6, #1
 80008e8:	e7ee      	b.n	80008c8 <__libc_init_array+0xc>
 80008ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80008ee:	4798      	blx	r3
 80008f0:	3601      	adds	r6, #1
 80008f2:	e7f2      	b.n	80008da <__libc_init_array+0x1e>
 80008f4:	0800094c 	.word	0x0800094c
 80008f8:	0800094c 	.word	0x0800094c
 80008fc:	0800094c 	.word	0x0800094c
 8000900:	08000950 	.word	0x08000950

08000904 <_init>:
 8000904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000906:	bf00      	nop
 8000908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800090a:	bc08      	pop	{r3}
 800090c:	469e      	mov	lr, r3
 800090e:	4770      	bx	lr

08000910 <_fini>:
 8000910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000912:	bf00      	nop
 8000914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000916:	bc08      	pop	{r3}
 8000918:	469e      	mov	lr, r3
 800091a:	4770      	bx	lr
